{
  "id": "EGae2IkX",
  "name": "Recursion",
  "intro": [
    "<p>Recursive functions can be expressed in combinators, however, they cannot refer to themselves by name.",
    "Instead, such function has to be passed to itself as an argument.</p>",
    "<p>Let's say we want to find <code>f</code> such that <code>f x = expr f x</code>",
    "for a given expression <code>expr</code> and arbitrary <code>x</code>.",
    "This cannot be done directly because <code>f</code> appears in both parts of the equation.",
    "We have, however, a couple tricks",
    "somewhat in the spirit of separation of variables in differential equations.</p>",
    "<p>First, let's assume that <code>f = g g</code> for some <code>g</code>.",
    "<i>(btw, can you prove that at least one such <code>g</code> exists for any given <code>f</code>?)</i>",
    "The equation thus becomes <code>g g x = expr (g g) x</code>,",
    "but it still contains <code>g</code> on both sides.</p>",
    "<p>Second, instead of looking for <code>g</code> itself, we look for a <code>g<sub>0</sub></code>",
    "satisfying <code>g<sub>0</sub> g x = expr (g g) x</code> for <i>any</i> <code>g</code>",
    "(including, of course, <code>g<sub>0</sub></code>).</p>",
    "<p>Now <i>this</i> can be solved for <code>g<sub>0</sub></code> using the methods from the previous quests,",
    "and the function with the required properties is then <code>f = g<sub>0</sub> g<sub>0</sub></code>.</p>",
    "<p>Side note: <code>C(KM) g x</code>, or cross constant mocker, may be used in place of <code>g g</code>",
    "to defer evaluation. This can radically decrease computation time, or even avoid an infinite loop.</p>"
  ],
  "content": [
    {
      "id": "7f1da361-e68d-4aeb-954f-bae7911ad114",
      "title": "Quine",
      "descr": [
        "Technically, every irreducible combinator is a quine, for it returns itself. ",
        "Write a combinator that returns itself when given <i>any</i> argument: <code>f x = f</code>."
      ],
      "input": "phi",
      "cases": [
        [ "phi x", "phi" ],
        [ "phi x y z", "phi" ]
      ]
    },
    {
      "id": "35d88d58-b0f1-42b1-8c69-ce306bf7c429",
      "title": "All of the above",
      "descr": [
        "<p>You are given a term <code>expr</code>.",
        "Construct f such that <code>f x = expr f x</code> for any given <code>x</code>.</p>",
        "<p>Bonus points for having <code>expr</code> at the end of your solution.</p>"
      ],
      "vars": ["expr"],
      "input": "phi",
      "cases": [
        [ "phi x", "expr phi x" ],
        [ "phi", "phi" ]
      ]
    },
    {
      "id": "292e29e7-41bc-4bf8-ac8c-88e6851d880a",
      "title": "Tell me Y",
      "descr": [
        "Implement the famous fixed point combinator, <code>Y</code>: <code>Y f = f (Y f)</code>."
      ],
      "input": "Y",
      "unlock": "Y",
      "solution": "WI(W(B(SI)))",
      "comment": "Implementing meaningful tests for Y is damn hard I should say...",
      "cases": [
        [ "Y (a->b->a) x", "Y (a->b->a)"],
        [ "Y (Kx)", "x" ],
        [ "Y (f->a->b->b (f (a b)) a ) filler K K K (KI)", "filler KKK"]
      ]
    },
    {
      "id": "b7a47859-5350-489a-b30d-04206dbb384a",
      "title": "The lazy fixed point",
      "descr": [
        "<p>Under a normal reduction strategy, the classical fixed point combinator will terminate",
        "if given the right input. However, it may run indefinitely in <i>absence</i> of input.</p>",
        "<p>Make a variant of <code>Y</code>, <code>Z</code>, that doesn't start until there's some input:",
        "<code>Z f x = f (Z f) x</code>.</p>"
      ],
      "solution": "WI(B(S(BSC))(BC(C(K(WI)))))",
      "unlock": "Z",
      "input": "Z",
      "cases": [
        [ { "max": 200 },"Z f", "Z f" ],
        [ "Z f x", "f (Z f) x" ],
        [ "Z (Kx) y", "x y" ]
      ],
      "wrong": [
        "WI(W(B(SI)))"
      ]
    }
  ]
}
