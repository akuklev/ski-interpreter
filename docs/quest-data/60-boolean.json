{
  "id": "naAI2zi3",
  "created_at": "2025-03-25T14:17:10",
  "name": "Boolean logic",
  "intro": [
    "<code>K</code> and <code>KI</code> terms may be interpreted as <b>true</b> and <b>false</b>",
    ", respectively, as <code>K then else</code> will result in <code>then</code>",
    "and <code>KI then else</code> will result in <code>else</code>.",
    "The trick is almost always to feed a function to a boolean value, and not the other way around."
  ],
  "content": [
    {
      "id": "1WLQktu6",
      "created_at": "2024-08-29T09:15:33",
      "title": "not",
      "descr": [
        "Implement <code>not x</code>, that is,",
        "return <code>K</code> for <code>KI</code> and <code>KI</code> for <code>K</code>"
      ],
      "input": "phi",
      "cases": [
        [ "phi (KI) x y", "x" ],
        [ "phi K x y", "y" ]
      ]
    },
    {
      "id": "QRVhriTN",
      "created_at": "2024-08-29T09:15:33",
      "title": "and",
      "descr": [
        "make a term that takes 2 arguments and returns true (<code>K</code>)",
        " if and only if both are true"
      ],
      "input": "phi",
      "cases": [
        [ "phi K K", "K" ],
        [ "phi (KI) K", "KI" ],
        [ "phi K (KI)", "KI" ],
        [ "phi (KI) (KI)", "KI" ]
      ]
    },
    {
      "id": "RQq5xiBV",
      "created_at": "2024-08-29T09:15:33",
      "title": "or",
      "descr": [
        "the title says it"
      ],
      "input": "phi",
      "cases": [
        [ "phi K K", "K" ],
        [ "phi (KI) K", "K" ],
        [ "phi K (KI)", "K" ],
        [ "phi (KI) (KI)", "KI" ]
      ]
    },
    {
      "id": "Uu9HxTCJ",
      "created_at": "2024-08-29T09:15:33",
      "title": "nand",
      "descr": [
        "NAND (not and) is true unless both ot its inputs are true."
      ],
      "input": "phi",
      "cases": [
        [ "phi K K", "KI" ],
        [ "phi (KI) K", "K" ],
        [ "phi K (KI)", "K" ],
        [ "phi (KI) (KI)", "K" ]
      ]
    },
    {
      "id": "ZJQC2K3h",
      "created_at": "2024-08-29T09:15:33",
      "title": "Postfix if statement",
      "descr": [
        "Often the then/else branches are known before the condition that picks one of them.",
        "Provide a function that takes then/else terms and feeds them to its third argument."
      ],
      "input": "phi",
      "cases": [
        [ "phi x y K", "x" ],
        [ "phi x y (KI)", "y" ],
        [ "phi x y (SK)", "y" ]
      ]
    },
    {
      "id": "uvtknMlN",
      "created_at": "2025-02-23T13:17:56",
      "title": "Plan first, execute later",
      "descr": [
        "<p>The problem with the above approach is that both branches are always evaluated.",
        "This is not an issue from the logical standpoint - if a normal form exists, it will be reached -",
        "but actually seeing the computation terminate is more fun!</p>",
        "<p>So, you are given functions <code>cond</code>, <code>then</code>, and <code>else</code>,",
        "as well as a value <code>val</code>.</p>",
        "<p>Return <code>then val</code> if <code>cond val</code> is true,",
        "and <code>else val</code> otherwise.</p>"
      ],
      "unlock": "if",
      "input": "if",
      "comment": [
        "Note to future maintainer (or me):",
        "The cases with limited steps produce a never-terminating alternative branch",
        "to filter out non-solutions like (a d)(b d)(c d).",
        "BC(CI)CK n tells whether n is even in ~n steps."
      ],
      "cases": [
        ["if (K(KI)) b c d", "c d"],
        ["if (KK) b c d", "b d"],
        [{"max": 140}, "if (BC(CI)CK) (S(K(WI))(K(WI))) I 71", "71"],
        [{"max": 140}, "if (BC(CI)CK) I (S(K(WI))(K(WI))) 72", "72"]
      ]
    }
  ]
}
