[
  {
    "title": "Join em!",
    "descr": [
      "You are given 2 functions, <code>f</code> and <code>g</code>.",
      "Make a term that returns <code>f(g(x))</code> for any given <code>x</code>."
    ],
    "vars": [
      "f", "g"
    ],
    "cases": [
      [ "phi->phi x", "phi->f (g x)" ]
    ]
  },
  {
    "title": "Feeding a birdie",
    "descr": [
      "You are given a <i>known</i> value <code>x</code>.",
      "You goal is to make a term that feeds this value to an <i>unknown</i> function <code>f</code>"
    ],
    "vars": [ "phi->phi ", "phi->x" ],
    "cases": [
      [ "phi->phi f", "phi->f(x)" ]
    ]
  },
  {
    "title": "Feeding a hungry birdie",
    "descr": [
      "You are given two known values, <code>x</code> and <code>y</code>.",
      "Feed both of them, sequentially to function <code>f</code>."
    ],
    "vars": [ "phi->phi y", "phi->x" ],
    "cases": [
      [ "phi->phi f", "phi->f x y" ]
    ]
  },
  {
    "title": "Sandwich",
    "descr": [
      "You are given a term <code>y</code>.",
      "Implement <code>x &rarr; y(x(y))</code>."
    ],
    "vars": [ "phi->phi ", "phi->y" ],
    "cases": [
      [ "phi->phi x", "phi->y (x y)" ]
    ]
  },
  {
    "title": "Sandwich II",
    "descr": [
      "You are given a term <code>x</code> this time.",
      "Implement <code>y &rarr; y(x(y))</code>."
    ],
    "vars": [ "phi->phi ", "phi->x" ],
    "cases": [
      [ "phi->phi y", "phi->y (x y)" ]
    ]
  },
  {
    "title": "Sandwich III",
    "descr": [
      "Implement <code>x &rarr; y &rarr; y(x(y))</code>."
    ],
    "cases": [
      [ "phi->phi x y", "phi->y (x y)" ]
    ]
  }
]
