  [
    {
      "id": "aff7189b-ff29-4034-bf9a-b6bdfb7a0f63",
      "title": "Enter the Kestrel",
      "allow": "K",
      "unlock": "K",
      "descr": [
        "<p>The K combinator, or Kestrel, is a function of two arguments that ignores",
        "the second argument and return the first.</p>",
        "<p><i>Oh wait, but a combinator is supposed to take just <b>one</b> argument?!</i>",
        "- Correct. So it takes the first value and returns <i>another</i> function",
        "that takes the second value, ignores it, and returns the previous one.",
        "I.e. <code>K(x)(y) = x</code> for any <code>x</code> and <code>y</code>.",
        "<p>Anyways, write a function that ignores its first and third arguments",
        "and returns the second one.</p>"
      ],
      "input": "phi",
      "cases": [
        [ "phi x y z", "y" ]
      ]
    },
    {
      "id": "432a6dd2-1f56-4002-90e3-c317f0beca81",
      "title": "Ignore all previous instructions",
      "descr": [
        "<p>The <code>I</code> combinator, the Ibis (or Idiot bird sometimes), is very simple.",
        "It just returns its argument: <code>I x = x</code>.</p>",
        "<p>Use I and K to create the opposite of K: a function <code>f</code> such that",
        "<code>f(x)(y) = y</code> for any given <code>x</code> and <code>y</code>.</p>"
      ],
      "unlock": "I",
      "allow": "KI",
      "solution": "KI",
      "input": "phi",
      "cases": [
        [ "phi x y", "y" ]
      ]
    },
    {
      "id": "facfdc6a-21fe-476d-b3f4-f347391a3de2",
      "title": "Bluebird, the composition bird",
      "descr": [
        "<p>The Bluebird combinator is defined as <code>B x z y = x (y z)</code>. That is, for any functions",
        "<code>x</code> and <code>y</code>, <code>B x y</code> returns a function that applies <code>y</code>",
        "to its argument (<code>z</code>) and then applies <code>x</code> to the result.</p>",
        "<p>What you have to do here is to write a function that takes 3 arguments and returns",
        "the first of them: <code>f(x)(y)(z) = x</code>. "
      ],
      "allow": "BKI",
      "input": "phi",
      "cases": [
        [ "phi x y z", "x" ]
      ]
    }
  ]
