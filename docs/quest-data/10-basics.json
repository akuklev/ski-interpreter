{
  "id": "swBY7gpD",
  "name": "Baby steps",
  "intro": [
    "<p>Welcome to the world of combinators!</p>",
    "<p>See the <a href=\"intro.html\">introduction</a> for how stuff works here.</p>",
    "<p>A short reminder of the rules:</p>",
    "<ul><li><code>I x</code> evaluates to <code>x</code>;</li>",
    "<li><code>K x y</code> evaluates to <code>x</code>;</li>",
    "<li><code>S f g x</code> evaluates to <code>f x (g x)</code>;</li>",
    "<li>and all of the above only happens <i>at the beginning</i> of a (sub-)expression.</li></ul>",
    "<p>On the right you can see a list of available terms and their definitions,",
    "it will be slowly extending as more quests are being completed.</p>",
    "<p>Let's dive right in!</p>"
  ],
  "content": [
    {
      "id": "O3BfTzg2",
      "created_at": "2024-08-29T09:15:33",
      "title": "Ignore all previous instructions",
      "descr": [
        "<p>The <code>K</code> combinator, or Kestrel, takes two arguments and returns the first of them.</p>",
        "<p>Make the opposite of <code>K</code>: take two arguments and return the second.</p>"
      ],
      "unlock": "I",
      "allow": "SKI",
      "solution": "KI",
      "input": "phi",
      "cases": [
        [ "phi x y", "y" ]
      ]
    },
    {
      "id": "UZdEyeiN",
      "created_at": "2024-12-07T01:42:42",
      "title": "Join em!",
      "descr": [
        "Remember, the Starling combinator works as follows: <code>S f g x = f x (g x)</code>.",
        "Given 2 functions, <code>f</code> and <code>g</code>,",
        "create a term that returns <code>f(g(x))</code> for any given <code>x</code>."
      ],
      "vars": [
        "f", "g"
      ],
      "input": "phi",
      "subst": "&phi;",
      "cases": [
        [ "phi x", "f (g x)" ]
      ]
    },
    {
      "id": "DADG8des",
      "created_at": "2025-01-11T12:04:10",
      "title": "Join em harder",
      "descr": [
        "Now you are given 3 functions, <code>f</code>, <code>g</code>, and <code>h</code>.",
        "Create a term that returns <code>h(f(g(x)))</code> for any given <code>x</code>.",
        "Note that the order of arguments is the same as in the f(g(x)) problem,",
        "so you can copy part of the solution verbatim."
      ],
      "vars": [
        "f", "g", "h"
      ],
      "input": "phi",
      "cases": [
        [ "phi x", "h (f (g x))" ]
      ]
    },
    {
      "id": "VbnUGtfn",
      "created_at": "2024-12-07T01:42:42",
      "title": "Feeding a birdie",
      "descr": [
        "You are given a <i>known</i> value <code>x</code>.",
        "You goal is to make a term that feeds this value to an <i>unknown</i> function <code>f</code>:",
        "<code>&lt;your code&gt; f = f x</code>"
      ],
      "vars": [ "x" ],
      "input": "phi",
      "cases": [
        [ "phi f", "f(x)" ]
      ]
    },
    {
      "id": "T89a9q7G",
      "created_at": "2024-12-07T01:42:42",
      "title": "May the force be with you",
      "descr": [
        "How about ignoring 3 consecutive arguments and returning the fourth?"
      ],
      "input": "phi",
      "cases": [
        [ "phi x y z t", "t"]
      ]
    },
    {
      "id": "4LmjXm1E",
      "created_at": "2024-12-07T01:42:42",
      "title": "Between the rock and a hard place",
      "descr": [
        "Given <code>f</code> and <code>x</code>, creating a term that outputs <code>f x y</code>",
        "for <code>y</code> is very straightforward: it's just <code>f x</code>.",
        "Returning <code>f y x</code> is a bit trickier. Can you do it?"
      ],
      "input": "phi",
      "vars": ["f", "x"],
      "cases": [
        [ "phi y", "f y x"]
      ]
    },
    {
      "id": "Jz41j8ae",
      "created_at": "2024-12-01T16:54:23",
      "title": "The Mockingbird",
      "descr": [
        "<p><a href=\"https://en.wikipedia.org/wiki/To_Mock_a_Mockingbird\">To Mock A Mockingbird</a>",
        "is a classical combinatory logic introduction book by Raymond Smulyan.</p>",
        "<p>The Mockingbird itself <code>M x = x x</code> is of high importance in our further journey,",
        "basically being an impersonation of recursion.</p>",
        "<p>Derive it from <code>S</code>, <code>K</code>, and <code>I</code>.</p>"
      ],
      "hint": "Neither <code>K</code> nor <code>I</code> can duplicate arguments, so you can tell it's <code>S f g x</code>. What kind of <codE>f</code> and <code>g</code> would you expect?..",
      "allow": "SKI",
      "input": "phi",
      "unlock": "M",
      "cases": [
        [ "phi x", "x x" ]
      ]
    },
    {
      "id": "hiwf2WWz",
      "created_at": "2025-07-22T23:59:08",
      "title": "Triplication",
      "descr": [
        "<p>Create a term that make 3 copies of its only argument:</p>",
        "<p><code>M<sub>3</sub> x = x x x</code>.</p>"
      ],
      "input": "phi",
      "cases": [
        [ "phi x", "x x x" ]
      ]
    },
    {
      "id": "fvQITKZd",
      "created_at": "2025-03-21T23:39:01",
      "title": "A parliament of owls",
      "descr": [
        "<p>The Owl combinator is an important form of recursion, slightly more complicated than the Mockingbird:",
        "<code>O x y = y (x y)</code>.</p>",
        "<p>Here the duplicated argument is not just applied to itself, but also modified before doing so.</p>",
        "<p>Find O.</p>"
      ],
      "unlock": "O",
      "allow": "SKI",
      "input": "phi",
      "cases": [
        [ "phi x y", "y (x y)" ]
      ]
    },
    {
      "id": "lNUrDS4M",
      "created_at": "2024-12-01T16:54:23",
      "title": "Lost identity",
      "descr": [
        "Sadly, after the previous exercise the Ibis has flown away.",
        "Ask the Starling and the Kertrel to call it back.",
        "Emulate <code>x&rarr;x</code> with <code>S</code> and <code>K</code>.",
        "This one has multiple solutions."
      ],
      "hint": "What kind of <code>f</code> does one need to reduce <code>S f g x</code> to <code>x</code>?",
      "allow": "SK",
      "input": "phi",
      "cases": [
        ["phi x", "x"]
      ]
    }
  ]
}
