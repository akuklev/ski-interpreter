[
  {
    "title": "First principles I",
    "descr": [
      "You are given values <code>x</code>, <code>y</code>, and <code>z</code>.",
      "What would be the result of <code>I x y z</code>?"
    ],
    "vars": ["x", "y", "z"],
    "allow": "=I-I",
    "cases": [
      [ "f->f", "f->I x y z"]
    ]
  },
  {
    "title": "First principles II",
    "descr": [
      "You are given values <code>x</code>, <code>y</code>, and <code>z</code>.",
      "What would be the result of <code>K x y z</code>?"
    ],
    "vars": ["x", "y", "z"],
    "allow": "=I-I",
    "cases": [
      [ "f->f", "f->K x y z"]
    ]
  },
  {
    "title": "First principles III",
    "descr": [
      "You are given values <code>x</code>, <code>y</code>, and <code>z</code>.",
      "What would be the result of <code>S x y z</code>?"
    ],
    "vars": ["x", "y", "z"],
    "allow": "=I-I",
    "cases": [
      [ "f->f", "f->S x y z"]
    ]
  },
  {
    "title": "Ignore all previous instructions",
    "descr": [
      "The <code>K</code> combinator takes 2 arguments, <code>x</code> and <code>y</code>,",
      "and returns the first of them. You need to return the second one instead."
    ],
    "solution": "SK",
    "cases": [
      [ "phi->phi x y", "phi->y" ]
    ]
  },
  {
    "title": "Look at yourself",
    "descr": [
      "In the realm of combinators, everything is a function.",
      "So, how do you apply a function to itself? I.e. <code>x &rarr; x(x)</code>"
    ],
    "cases": [
      [ "phi->phi x", "phi->x x" ]
    ]
  },
  {
    "title": "Lost identity",
    "descr": [
      "Someone stole the <code>I</code> combinator from your interpreter.",
      "You have to rebuild it from the remaining two!"],
    "allow": "SK",
    "subst": "&psi;",
    "cases": [
      [ "phi->phi x", "phi->x" ]
    ]
  }
]
