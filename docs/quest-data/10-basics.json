  [
    {
      "id": "aff7189b-ff29-4034-bf9a-b6bdfb7a0f63",
      "title": "Enter the Kestrel",
      "allow": "K",
      "unlock": "K",
      "descr": [
        "<p>The K combinator, or Kestrel, follows the rule <code>K x y = x</code>",
        "for any <code>x</code> and <code>y</code>. </p>",
        "<p>Provide a term that ignores its first and third argument and return the second one.</p>"
      ],
      "input": "phi",
      "cases": [
        [ "phi x y z", "y" ]
      ]
    },
    {
      "id": "432a6dd2-1f56-4002-90e3-c317f0beca81",
      "title": "Ignore all previous instructions",
      "descr": [
        "<p>The <code>I</code> combinator, the Ibis (or Idiot bird sometimes), is very simple.",
        "It just returns its argument: <code>I x = x</code>.</p>",
        "<p><code>I</code> alone is not very interesting as <code>II</code>, <code>III</code>,",
        "<code>I(II)</code> and so on and so forth all evaluate to just <code>I</code>.",
        "Note, however, that <code>x I</code> does <b>not</b> become <code>x</code>!</p>",
        "<p>Use I and K to create the opposite of K: a term <code>f</code> such that",
        "<code>f x y = y</code> for any given <code>x</code> and <code>y</code>.</p>"
      ],
      "unlock": "I",
      "allow": "KI",
      "solution": "KI",
      "input": "phi",
      "cases": [
        [ "phi x y", "y" ]
      ]
    },
    {
      "id": "facfdc6a-21fe-476d-b3f4-f347391a3de2",
      "title": "Bluebird, the composition bird",
      "descr": [
        "<p>Of course, one can also think of a combinator as of a function of <i>one</i> argument",
        "which takes a combinator and returns a combinator. For instance, <code>K</code>",
        "accepts a value and returns a function that accepts another value, discards it,",
        "and returns the previous one instead.</p>",
        "<p>The Bluebird is defined by evaluation rule <code>B x y z = x (y z)</code>,",
        "or alternatively it can be described as a function that returns a composition of two functions",
        "(<code>y</code> and <code>x</code> in this case).</p>",
        "<p>Construct a function that takes 3 arguments and returns the first of them,",
        "discarding the other two.</p>"
      ],
      "allow": "BKI",
      "input": "phi",
      "cases": [
        [ "phi x y z", "x" ]
      ]
    }
  ]
