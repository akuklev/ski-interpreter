  [
    {
      "id": "432a6dd2-1f56-4002-90e3-c317f0beca81",
      "title": "Ignore all previous instructions",
      "descr": [
        "<p>The <code>K</code> combinator, or Kestrel, takes two arguments and returns the first of them.</p>",
        "<p>Make the opposite of <code>K</code>: take two arguments and return the second.</p>"
      ],
      "unlock": "I",
      "allow": "SKI",
      "solution": "KI",
      "input": "phi",
      "cases": [
        [ "phi x y", "y" ]
      ]
    },
    {
      "id": "e78cbce3-11f4-4a85-943c-d96dd4120315",
      "title": "Join em!",
      "descr": [
        "Remember, the Starling combinator works as follows: <code>S f g x = f x (g x)</code>.",
        "Given 2 functions, <code>f</code> and <code>g</code>,",
        "create a term that returns <code>f(g(x))</code> for any given <code>x</code>."
      ],
      "vars": [
        "f", "g"
      ],
      "input": "phi",
      "cases": [
        [ "phi x", "f (g x)" ]
      ]
    },
    {
      "id": "aff42182-b14e-46eb-9686-69d63266fb87",
      "title": "Join em harder",
      "descr": [
        "Now you are given 3 functions, <code>f</code>, <code>g</code>, and <code>h</code>.",
        "Create a term that returns <code>h(f(g(x)))</code> for any given <code>x</code>.",
        "Note that the order of arguments is the same as in the f(g(x)) problem,",
        "so you can copy part of the solution verbatim."
      ],
      "vars": [
        "f", "g", "h"
      ],
      "input": "phi",
      "cases": [
        [ "phi x", "h (f (g x))" ]
      ]
    },
    {
      "id": "fb59a599-97a8-44bd-942f-560b44492d6a",
      "title": "Feeding a birdie",
      "descr": [
        "You are given a <i>known</i> value <code>x</code>.",
        "You goal is to make a term that feeds this value to an <i>unknown</i> function <code>f</code>:",
        "<code>&lt;your code&gt; f = f x</code>"
      ],
      "vars": [ "x" ],
      "input": "phi",
      "cases": [
        [ "phi f", "f(x)" ]
      ]
    },
    {
      "id": "d25152ba-7ad5-476a-ab58-575bb086c9f4",
      "title": "May the force be with you",
      "descr": [
        "How about ignoring 3 consecutive arguments and returning the fourth?"
      ],
      "input": "phi",
      "cases": [
        [ "phi x y z t", "t"]
      ]
    },
    {
      "id": "6f88ef3c-8736-40d3-8453-d9f9c58fe54f",
      "title": "Between the rock and a hard place",
      "descr": [
        "Given <code>f</code> and <code>x</code>, creating a term that outputs <code>f x y</code>",
        "for <code>y</code> is very straightforward: it's just <code>f x</code>.",
        "Returning <code>f y x</code> is a bit trickier. Can you do it?"
      ],
      "input": "phi",
      "vars": ["f", "x"],
      "cases": [
        [ "phi y", "f y x"]
      ]
    },
    {
      "id": "aca170cd-464f-4075-9673-835cee5e465f",
      "title": "The Mockingbird",
      "descr": [
        "<p><a href=\"https://en.wikipedia.org/wiki/To_Mock_a_Mockingbird\">To Mock A Mockingbird</a>",
        "is a classical combinatory logic introduction book by Raymond Smulyan.</p>",
        "<p>The Mockingbird itself <code>M x = x x</code> is of high importance in our further journey,",
        "basically being an impersonation of recursion.</p>",
        "<p>Derive it from <code>S</code>, <code>K</code>, and <code>I</code>.</p>"
      ],
      "hint": "Neither <code>K</code> nor <code>I</code> can duplicate arguments, so you can tell it's <code>S f g x</code>. What kind of <codE>f</code> and <code>g</code> would you expect?..",
      "allow": "SKI",
      "input": "phi",
      "unlock": "M",
      "cases": [
        [ "phi x", "x x" ]
      ]
    },
    {
      "id": "f52144ba-a821-4866-9ae2-8c00156d20e3",
      "title": "Lost identity",
      "descr": [
        "Sadly, after the previous exercise the Ibis has flown away.",
        "Ask the Starling and the Kertrel to call it back.",
        "Emulate <code>x&rarr;x</code> with <code>S</code> and <code>K</code>.",
        "This one has multiple solutions."
      ],
      "hint": "What kind of <code>f</code> does one need to reduce <code>S f g x</code> to <code>x</code>?",
      "allow": "SK",
      "input": "phi",
      "cases": [
        ["phi x", "x"]
      ]
    }
  ]
