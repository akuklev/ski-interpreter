  [
    {
      "id": "aff7189b-ff29-4034-bf9a-b6bdfb7a0f63",
      "title": "Enter the Kestrel",
      "allow": "K",
      "unlock": "K",
      "descr": [
        "<p>The K combinator, or Kestrel, follows the rule <code>K x y = x</code>",
        "for any <code>x</code> and <code>y</code>. </p>",
        "<p>Provide a term that ignores its first and third argument and return the second one.</p>"
      ],
      "input": "phi",
      "cases": [
        [ "phi x y z", "y" ]
      ]
    },
    {
      "id": "432a6dd2-1f56-4002-90e3-c317f0beca81",
      "title": "Ignore all previous instructions",
      "descr": [
        "<p>The <code>I</code> combinator, the Ibis (or Idiot bird sometimes), is very simple.",
        "It just returns its argument: <code>I x = x</code>.</p>",
        "<p><code>I</code> alone is not very interesting as <code>II</code>, <code>III</code>,",
        "<code>I(II)</code> and so on and so forth all evaluate to just <code>I</code>.",
        "Note, however, that <code>x I</code> does <b>not</b> become <code>x</code>!</p>",
        "<p>Use I and K to create the opposite of K: a term <code>f</code> such that",
        "<code>f x y = y</code> for any given <code>x</code> and <code>y</code>.</p>"
      ],
      "unlock": "I",
      "allow": "KI",
      "solution": "KI",
      "input": "phi",
      "cases": [
        [ "phi x y", "y" ]
      ]
    },
    {
      "id": "facfdc6a-21fe-476d-b3f4-f347391a3de2",
      "title": "Bluebird, the composition bird",
      "descr": [
        "<p>Of course, one can also think of a combinator as of a function of <i>one</i> argument",
        "which takes a combinator and returns a combinator. For instance, <code>K</code>",
        "accepts a value and returns a function that accepts another value, discards it,",
        "and returns the previous one instead.</p>",
        "<p>The Bluebird is defined by evaluation rule <code>B x y z = x (y z)</code>,",
        "or alternatively it can be described as a function that returns a composition of two functions",
        "(<code>y</code> and <code>x</code> in this case).</p>",
        "<p>Construct a function that takes 3 arguments and returns the first of them,",
        "discarding the other two.</p>"
      ],
      "allow": "BKI",
      "input": "phi",
      "cases": [
        [ "phi x y z", "x" ]
      ]
    },
    {
      "id": "ef420d94-60db-479b-a38b-d6e6af51757a",
      "title": "Birds with echoing songs echoing songs",
      "descr": [
        "<p>So far we've only been dicarding arguments, how about duplicating them?",
        "Such combinators do exist, too.</p>",
        "<p>The Warbler is defined as <code>W x y = x y y</code>. We'll encounter it many times!</p>",
        "<p>The Lark <code>L x y = x (y y)</code> differs by only a pair of parentheses. ",
        "Can you construct the latter from the former?</p>"
      ],
      "allow": "BKIW",
      "input": "phi",
      "cases": [
        ["phi x y", "x (y y)"]
      ]
    },
    {
      "id": "19c3d06b-d359-44ea-a7e2-3c9b14f02291",
      "title": "The Mockingbird",
      "descr": [
        "<p>The Mockingbird <code>M x = x x</code> is of high importance in combinatory logic,",
        "basically an impersonation of recursion.</p>",
        "<p>It's not that easy to derive other duplicating birds from a Mockingbird,",
        "however, Mockingbird is easily constructible from either W or L. Go ahead and mock it!</p>"
      ],
      "allow": "BKWI",
      "vars": ["L = x->y->x (y y)"],
      "input": "phi",
      "cases": [
        ["phi x", "x x"]
      ]
    },
    {
      "id": "9de71f24-3a20-4fba-9bfb-4cddae5a9e82",
      "title": "Swap 'em",
      "descr": [
        "<p>Now that we can erase, compose, and double terms, one important thing that is still left",
        "is swapping them.</p>",
        "<p>The Cardinal <code>C x y z = x z y</code> and Thrush <code>T x y = y x</code> are capable of that.</p>",
        "<p>Build <code>T</code>.</p>"
      ],
      "allow": "BWKCI",
      "input": "phi",
      "cases": [
        ["phi x y", "y x"]
      ]
    },
    {
      "id": "9afbc9a5-b262-4d0a-a954-942201f6de50",
      "title": "Swap 'em but later",
      "descr": [

      ],
      "allow": "BWCKI",
      "input": "phi",
      "cases": [
        ["phi x y z t", "x y t z"]
      ]
    },
    {
      "id": "f67a4a18-9ae1-4585-ac25-e4560747228e",
      "title": "Mirror image",
      "descr": [
        "<p>Swap 1st and 3rd arguments, leaving the 2nd in its place</p>"
      ],
      "input": "r",
      "cases": [
        [ "r x y z", "x y z"]
      ]
    },
    {
      "id": "9fbfe2f2-13b6-45db-a884-9748a7961a55",
      "title": "Enter Starling",
      "descr": [
        "Given x, y, and z, what would SS x y z look like?"
      ],
      "allow": "-S",
      "vars": ["x", "y", "z"],
      "input": "phi",
      "cases": [
        [ "phi", "y z (x y z)" ]
      ]
    }
  ]
