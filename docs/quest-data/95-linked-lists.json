{
  "id": "Zc62TKDe",
  "created_at": "2025-03-25T14:17:10",
  "name": "Lists revisited",
  "intro": [
    "<p>Self-reducing lists are all fun and games, but it many applications (such as the LISP family)",
    "simplicity and observability and more practical.",
    "So here comes the linked list: each node is either a pair of (value, next)",
    " - traditionally denoted cons - or a nil.",
    "<code>nil</code> is, of course, <code>KI</code>, and <code>cons</code> is <code>V</code>.",
    "Let's go!</p>"
  ],
  "content": [
    {
      "id": "bMdsUR5U",
      "created_at": "2025-03-16T03:10:08",
      "title": "Are we there yet?",
      "descr": [
        "<p>Before we start, we'll need a way to tell when a list ends</p>",
        "<p>Find a function <code>is_empty</code> that returns <code>K</code> for <code>nil</code>",
        "and <code>KI</code> for <code>V x y</code>, whatever <code>x</code> and <code>y</code> are.</p>"
      ],
      "input": "is_empty",
      "unlock": "is_empty",
      "cases": [
        ["is_empty (KI) x y", "x"],
        ["V=BC(CI); is_empty (V a b) x y", "y"]
      ]
    },
    {
      "id": "VvbGJqE1",
      "created_at": "2025-03-16T03:10:08",
      "title": "Fold",
      "descr": [
        "<p>Implement fold: <code>fold [a, b, ... z] f x = f a (f b (... (f z x) ...))</code>.",
        "More specifically, <code>fold nil f x = x</code>",
        "and <code>fold (V a b) f x = f a (fold b f x)</code>.</p>",
        "<p>Note that is you reuse <code>lst</code> and <code>nil</code> from the previous chapter,",
        "you could care less about what <code>f</code> and <code>x</code> are.</p>"
      ],
      "input": "fold",
      "unlock": "fold",
      "cases": [
        ["fold (KI) f x", "x"],
        ["V=BC(CI); fold (V a (KI)) f x", "f a x"],
        ["V=BC(CI); fold (V a b) f x", "f a (fold b f x)"],
        ["V=BC(CI); fold (Va (Vb (Vc (KI)))) f x", "f a (f b (f c x))"]
      ]
    },
    {
      "id": "Rpc0i8ff",
      "created_at": "2025-05-31T14:11:17",
      "title": "It's all just ones and zeros",
      "descr": [
        "<p>Convert a string of booleans (K/KI) starting from low bits (little-endian) to a Church numeral.",
        "Empty list is zero.</p>"
      ],
      "input": "num",
      "cases": [
        ["num (KI) + 0", "0"],
        ["V=BC(CI); t=K; f=KI; num (V f f) + 0", "0"],
        ["V=BC(CI); t=K; f=KI; num (V t f) + 0", "1"],
        ["V=BC(CI); t=K; f=KI; num (V t (V f (V t f))) + 0", "5"],
        ["V=BC(CI); t=K; f=KI; num (V f (V f (V f (V t f)))) + 0", "8"],
        ["V=BC(CI); t=K; f=KI; num (V f (V f (V f (V f f)))) + 0", "0"],
        ["V=BC(CI); t=K; f=KI; num (V t (V t (V f (V t f)))) + 0", "11"]
      ]
    }
  ]
}
