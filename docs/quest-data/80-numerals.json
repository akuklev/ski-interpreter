{
  "id": "Oad7RqXx",
  "name": "The Church of Numerals",
  "intro": [
    "As everything in the world of combinators is a function, numbers are functions, too.",
    "A Church numeral (named after ",
    "<a href=\"https://en.wikipedia.org/wiki/Alonzo_Church\" target=\"_blank\">Alonzo Church</a>)",
    "is a function <code>N</code> that takes 2 arguments, <code>x</code> and <code>y</code>,",
    "and returns <code>x(...N times...(x(y))...).</code>",
    "By that definition, 0 is <code>KI</code> (just as false),",
    "as it repeats the first argument exactly 0 times,",
    "and 1 is <code>I</code> (easy to confuse)."
  ],
  "content": [
    {
      "id": "08e7fa65-1a48-45f3-b115-20aa67520a3e",
      "title": "zero... one... two?!",
      "descr": [
        "Look at the definition above once more. What would number 2 look like?"
      ],
      "input": "phi",
      "cases": [
        [ "phi x y", "x(x(y))" ]
      ]
    },
    {
      "id": "815847b2-5aec-4496-bc94-07316bd2278b",
      "title": "inc",
      "descr": [
        "Procure a term that increases given number by 1: <code>inc N x y &rarr; x(...N+1 times(y)...)</code>. "
      ],
      "hint": "<code>inc N x y &rarr; x (N x y)</code>.",
      "unlock": "+",
      "input": "phi",
      "cases": [
        [ "phi (KI) x y", "x y" ],
        [ "phi (SK) x y", "x y" ],
        [ "phi I x y", "x (x y)" ],
        [ "phi 8 x y", "9 x y" ]
      ]
    },
    {
      "id": "ca234c6c-a6d3-4d8e-8f41-adb26b2dc246",
      "title": "Adding numbers",
      "descr": [
        "Create a term that takes two numbers and produces their sum."
      ],
      "hint": "This can be done by applying <code>inc</code> m times to n",
      "input": "phi",
      "solution": "CI(SB)",
      "cases": [
        [ "phi 0 0 + 0", "0" ],
        [ "phi 5 0 + 0", "5" ],
        [ "phi 0 5 + 0", "5" ],
        [ "phi I I + 0", "2" ],
        [ "phi (S(S(KS)K)I) (WB) + 0", "4" ]
      ]
    },
    {
      "id": "e61e545e-42b6-4ab0-b311-0372841e87f5",
      "title": "Hello? Is there anybody in there?",
      "descr": [
        "Make a term that returns <code>K</code> for 0 and <code>KI</code> for all other numbers. ",
        "As often with numbers, you need to find <code>f</code> and <code>x</code>",
        "such that <code>f(f(...f(x)...))</code> does what you want."
      ],
      "unlocks": "is_zero",
      "input": "phi",
      "cases": [
        [ "phi (KI) x y", "x" ],
        [ "phi (SK) x y", "x" ],
        [ "phi I x y", "y" ],
        [ "phi 2 x y", "y" ],
        [ "phi 43 x y", "y" ]
      ]
    },
    {
      "id": "40a76eaa-faa3-4631-944a-1f9f60696fce",
      "title": "Space oddity",
      "descr": [
        "<p>Create a term that returns <code>K</code> (or equivalent) for odd numbers",
        "and <code>KI</code> for even numbers.</p>",
        "<p>Note that the test suite evaluates the effect of the term and not its composition",
        "(e.g. SK instead of KI is fine).</p>"
      ],
      "unlock": "is_even",
      "input": "phi",
      "cases": [
        [ "phi 0 x y", "x"],
        [ "phi 1 x y", "y"],
        [ "phi 22 x y", "x"],
        [ "phi 23 x y", "y"]
      ]
    },
    {
      "id": "92d3e3f7-cb26-4294-955b-ba526a61bb42",
      "title": "Take a little trip back with father Tiresias...",
      "descr": [
        "<p>Here you'll have to return the predecessor of a number, or 0 for 0.</p>",
        "<p>This cannot be done by passing just 2 arguments to a number (prove it!),",
        "however, 3 should suffice.</p>"
      ],
      "solution": "BBBC(BC(CI))  (C(B(CI))(SB))  (K(KI) )I ",
      "unlock": "dec",
      "input": "phi",
      "cases": [
        [ "phi (KI) + 0", "0" ],
        [ "phi I + 0", "0" ],
        [ "phi 2 + 0", "1" ],
        [ "phi 13 + 0", "12" ]
      ]
    },
    {
      "id": "2bcd7557-aa93-4a3f-a56a-8bc81442a7d7",
      "title": "Half-life",
      "descr": [
        "<p>Create a term that takes a number <em>n</em> and returns <em>n/2</em>.</p>",
        "<p>You can of course use <code>dec</code>, <code>is_zero</code>, and recursion,",
        "however, doing the same trick as above will be more efficient,",
        "as Church numeral already have recursion built into them.</p>"
      ],
      "input": "phi",
      "cases": [
        [ "phi (KI) + 0", "0" ],
        [ "phi I + 0", "0" ],
        [ "phi 2 + 0", "1" ],
        [ "phi 3 + 0", "1" ],
        [ "phi 4 + 0", "2" ],
        [ "phi 5 + 0", "2" ],
        [ { "max": 2000}, "phi 20 + 0", "10" ],
        [ { "max": 2000}, "phi 21 + 0", "10" ]
      ]
    },
    {
      "id": "3cbfbce6-6701-4d5c-8217-ab36647f4185",
      "title": "Multiplication",
      "descr": [
        "Create a term that takes two numbers and produces their product."
      ],
      "input": "phi",
      "cases": [
        [ "phi 0 0 + 0", "0" ],
        [ "phi 0 5 + 0", "0" ],
        [ "phi 5 0 + 0", "0" ],
        [ "phi 2 3 + 0", "6" ],
        [ "phi 3 2 + 0", "6" ],
        [ "phi 3 3 + 0", "9" ],
        [ "phi 4 4 + 0", "16" ],
        [ "phi 5 5 + 0", "25" ]
      ]
    },
    {
      "id": "023f8486-03ee-4e55-98ce-a779c6325844",
      "title": "Power to the people",
      "descr": [
        "Create a term that takes two numbers and produces the first number raised to the power of the second."
      ],
      "input": "phi",
      "cases": [
        [ "phi 0 0 + 0", "1" ],
        [ "phi 0 5 + 0", "0" ],
        [ "phi 5 0 + 0", "1" ],
        [ "phi 2 3 + 0", "8" ],
        [ "phi 3 2 + 0", "9" ],
        [ "phi 3 3 + 0", "27" ],
        [ "phi 4 4 + 0", "256" ],
        [ "phi 5 5 + 0", "3125" ]
      ]
    },
    {
      "id": "706e03ef-dad1-44d7-9dde-784b801ea7c6",
      "title": "His Majesty Factorial",
      "descr": [
        "Make a term that takes a number n and returns a product of all numbers from 1 to n."
      ],
      "input": "phi",
      "cases": [
        ["phi(KI) + 0", "1"   ],
        ["phi I + 0",   "1"   ],
        ["phi 5 + 0",   "120" ]
      ]
    },
    {
      "id": "56b36d8d-0945-4457-a7b3-f4f7e8cb344a",
      "title": "Down the rabbit hole",
        "descr": [
          "<p>Create a term that takes a number n and returns the nth Fibonacci number.</p>",
          "<p>Note that it might be easier to build n-th <i>pair</i> of Fibonacci numbers first.</p>"
        ],
        "input": "phi",
        "cases": [
            ["phi(KI) + 0", "0" ],
            ["phi I + 0",   "1" ],
            ["phi 5 + 0",   "5" ],
            ["phi 6 + 0",   "8" ],
            ["phi 7 + 0",   "13" ]
        ]
    },
    {
      "id": "c89bd1b9-56fd-4947-97fd-caf0e3320001",
      "title": "Something in common",
        "descr": [
            "<p>Create a term that takes two numbers and returns their greatest common divisor.</p>",
            "<p>This is the first task where true recursion is inevitable.</p>"
        ],
        "input": "euclid",
        "cases": [
          [ "euclid  0  0 + 0",   "0" ],
          [ "euclid  1  0 + 0",   "1" ],
          [ "euclid  0  1 + 0",   "1" ],
          [ "euclid  1  1 + 0",   "1" ],
          [ "euclid  2  3 + 0",   "1" ],
          [ "euclid  4  6 + 0",   "2" ],
          [ "euclid  9  6 + 0",   "3" ],
          [ "euclid  12 15 + 0",  "3" ]
        ]
    }
  ]
}
