{
  "id": "naAI2zi3",
  "created_at": "2025-03-25T14:17:10",
  "name": "Boolean logic",
  "intro": [
    "<p><code>K</code> and <code>KI</code> terms may be interpreted as <b>true</b> and <b>false</b>",
    ", respectively, as <code>K then else</code> will result in <code>then</code>",
    "and <code>KI then else</code> will result in <code>else</code>.",
    "The trick is almost always to feed a function to a boolean value, and not the other way around.</p>",
    "<p>Throughout this chapter, you don't have to return exactly <code>K</code> and <code>KI</code>,",
    "any term(s) that affect their arguments in the same way will do.</p>"
  ],
  "content": [
    {
      "id": "1WLQktu6",
      "created_at": "2024-08-29T09:15:33",
      "title": "not",
      "descr": [
        "<p>Implement <code>not x</code>, that is,",
        "return <code>K</code> for <code>KI</code> and <code>KI</code> for <code>K</code>.</p>",
        "<p>How short can you make it?</p>"
      ],
      "input": "phi",
      "cases": [
        [ "phi (KI) true false", "true" ],
        [ "phi K true false", "false" ]
      ]
    },
    {
      "id": "ZJQC2K3h",
      "created_at": "2024-08-29T09:15:33",
      "title": "Postfix if statement",
      "descr": [
        "<p>Before we go further, let's implement a function that picks between two precalculated values.</p>",
        "<p>Make a function of <code>x</code>, <code>y</code>, and <code>z</code>, ",
        "such that it returns <code>x</code> for any true <code>z</code> and <code>y</code> for a false one.</p>"
      ],
      "input": "phi",
      "cases": [
        [ "phi x y K", "x" ],
        [ "phi x y (KI)", "y" ],
        [ "phi x y (SK)", "y" ]
      ]
    },
    {
      "id": "RQq5xiBV",
      "created_at": "2024-08-29T09:15:33",
      "title": "or",
      "descr": [
        "<p>The <code>or</code> is true if one of its arguments is true, or false if both are false.</p>"
      ],
      "hint": "Assume <code>or</code> is a function of <i>one</i> argument. What function should it return for true and false?",
      "input": "phi",
      "cases": [
        [ "phi K K true false", "true" ],
        [ "phi (KI) K true false", "true" ],
        [ "phi K (KI) true false", "true" ],
        [ "phi (KI) (KI) true false", "false" ]
      ]
    },
    {
      "id": "QRVhriTN",
      "created_at": "2024-08-29T09:15:33",
      "title": "and",
      "descr": [
        "make a term that takes 2 arguments and returns true (<code>K</code>)",
        " if and only if both are true"
      ],
      "input": "phi",
      "cases": [
        [ "phi K K true false", "true" ],
        [ "phi (KI) K true false", "false" ],
        [ "phi K (KI) true false", "false" ],
        [ "phi (KI) (KI) true false", "false" ]
      ]
    },
    {
      "id": "Uu9HxTCJ",
      "created_at": "2024-08-29T09:15:33",
      "title": "nand",
      "descr": [
        "<p><code>nand</code> (not and) is true unless both ot its inputs are true.</p>",
        "<p>Given the ability to duplicate, swap, compose, and discard arguments, <i>just one</i>",
        "<code>nand</code> term is enough to implement <i>any</i> boolean function.</p>"
      ],
      "input": "phi",
      "cases": [
        [ "phi K K true false", "false" ],
        [ "phi (KI) K true false", "true" ],
        [ "phi K (KI) true false", "true" ],
        [ "phi (KI) (KI) true false", "true" ]
      ]
    },

    {
      "id": "uvtknMlN",
      "created_at": "2025-02-23T13:17:56",
      "title": "Plan first, execute later",
      "descr": [
        "<p>Implement a function of four arguments: <code>check</code>, <code>then</code>, <code>else</code>,",
        "and <code>x</code>. It should return <code>then x</code> if <code>check x</code> returns <code>K</code>,",
        "and <code>else x</code> if <code>check x</code> returns <code>KI</code>.</p>"
      ],
      "unlock": "if",
      "input": "if",
      "cases": [
        ["if (K(KI)) b c d", "c d"],
        ["if (KK) b c d", "b d"],
        ["if I b c K", "b K"],
        ["if I b c (KI)", "c (KI)"],
        ["V=BC(CI); if (VCK) f g 6", "f 6"],
        ["V=BC(CI); if (VCK) f g 7", "g 7"]
      ]
    }
  ]
}
