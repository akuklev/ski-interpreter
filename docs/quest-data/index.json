[
  {
    "id": "swBY7gpD",
    "name": "Baby steps",
    "intro": [
      "<p>Welcome to the world of combinators!</p>",
      "<p>See the <a href=\"intro.html\">introduction</a> for how stuff works here.</p>",
      "<p>A short reminder of the rules:</p>",
      "<ul><li><code>I x</code> evaluates to <code>x</code>;</li>",
      "<li><code>K x y</code> evaluates to <code>x</code>;</li>",
      "<li><code>S f g x</code> evaluates to <code>f x (g x)</code>;</li>",
      "<li>and all of the above only happens <i>at the beginning</i> of a (sub-)expression.</li></ul>",
      "<p>On the right you can see a list of available terms and their definitions,",
      "it will be slowly extending as more quests are being completed.</p>",
      "<p>Let's dive right in!</p>"
      ],
    "link": "10-basics.json"
  },
  {
    "id": "xQymFNkW",
    "name": "Swing, swing!",
    "intro": [
      "Let's move some arguments around.",
      "Just like in many chess and math problems, work backwards:",
      "what &lambda;-expression do you want to see before applying to the last argument?",
      "Then construct it via the above technique and go one argument back,",
      "until you run out of them."
    ],
    "link": "30-arguments.json"
  },
  {
    "id": "rd1key1L",
    "name": "The BCKW forest",
    "intro": [
      "<p>As you progress discovering more and more combinators,",
      "you find out that some of them can thrive on their own.",
      "In fact, as you wander further, you find yourself surrounded by a think forest",
      "built entirely of four combinators:",
      "<code>B</code>, <code>C</code>, <code>K</code>, and <code>W</code>.",
      "Can you find the way back?</p>",
      "<p>See also: <a href=\"https://en.wikipedia.org/wiki/B,_C,_K,_W_system\">BCKW system</a>",
      "on wikipedia.</p>"
    ],
    "link": "40-bckw.json"
  },
  {
    "id": "NJpjdogX",
    "name": "The island of Iota",
    "intro": [
      "Now you know two bases: the SK(I) and the BCKW.",
      "Apparently, there is a one element base: <code>X = x &rarr; xSK</code>. Try it!"
    ],
    "link": "50-iota.json"
  },
  {
    "id": "uTxVHWJa",
    "name": "MTAB jailbreak",
    "intro": [
      "<p>Another weird combinator base is <b>MTAB</b>.",
      "Just like the BCKW system, it consists of four combinators,",
      "representing duplication, swapping, discarding, and composition, respectively:",
      "<code>M a = a</code>, <code>T a b = b a</code>, <code>A a b = b</code>,",
      "and <code>B a b c = a (b c)</code>.</p>",
      "<p>Your task is to go back to BCKW from here. Good luck!</p>"
    ],
    "link": "65-mtab.json"
  },
  {
    "id": "IheXweZm",
    "name": "Linear combinators",
    "intro": [
      "<p>A lambda expression (and, subsequently, a combinator) is called <b>linear</b>",
      "if it uses all of its arguments exactly once and adds no new terms.",
      "It can thus compose and swap terms, but not duplicate or discard them.</p>",
      "<p>For example, <code>B</code> and <code>C</code> are linear, but <code>W</code> and <code>K</code> are not.</p>",
      "<p>Quite naturally, applications and compositions of linear combinators are also linear.",
      "However, a linear combinator may be composed from non-linear ones.</p>",
      "<p>Let's move some terms around!</p>"
    ],
    "link": "57-linear.json"
  },
  {
    "id": "naAI2zi3",
    "name": "Boolean logic",
    "intro": [
      "<code>K</code> and <code>KI</code> terms may be interpreted as <b>true</b> and <b>false</b>",
      ", respectively, as <code>K then else</code> will result in <code>then</code>",
      "and <code>KI then else</code> will result in <code>else</code>.",
      "The trick is almost always to feed a function to a boolean value, and not the other way around."
    ],
    "link": "60-boolean.json"
  },
  {
    "id": "EGae2IkX",
    "name": "Recursion",
    "intro": [
      "<p>Recursive functions can be expressed in combinators, however, they cannot refer to themselves by name.",
      "Instead, such function has to be passed to itself as an argument.</p>",
      "<p>Let's say we want to find <code>f</code> such that <code>f x = expr f x</code>",
      "for a given expression <code>expr</code> and arbitrary <code>x</code>.",
      "This cannot be done directly because <code>f</code> appears in both parts of the equation.",
      "We have, however, a couple tricks",
      "somewhat in the spirit of separation of variables in differential equations.</p>",
      "<p>First, let's assume that <code>f = g g</code> for some <code>g</code>.",
      "<i>(btw, can you prove that at least one such <code>g</code> exists for any given <code>f</code>?)</i>",
      "The equation thus becomes <code>g g x = expr (g g) x</code>,",
      "but it still contains <code>g</code> on both sides.</p>",
      "<p>Second, instead of looking for <code>g</code> itself, we look for a <code>g<sub>0</sub></code>",
      "satisfying <code>g<sub>0</sub> g x = expr (g g) x</code> for <i>any</i> <code>g</code>",
      "(including, of course, <code>g<sub>0</sub></code>).</p>",
      "<p>Now <i>this</i> can be solved for <code>g<sub>0</sub></code> using the methods from the previous quests,",
      "and the function with the required properties is then <code>f = g<sub>0</sub> g<sub>0</sub></code>.</p>",
      "<p>Side note: <code>C(KM) g x</code>, or cross constant mocker, may be used in place of <code>g g</code>",
      "to defer evaluation. This can radically decrease computation time, or even avoid an infinite loop.</p>"
    ],
    "link": "70-recursion.json"
  },
  {
    "id": "Oad7RqXx",
    "name": "The Church of Numerals",
    "intro": [
      "As everything in the world of combinators is a function, numbers are functions, too.",
      "A Church numeral (named after ",
      "<a href=\"https://en.wikipedia.org/wiki/Alonzo_Church\" target=\"_blank\">Alonzo Church</a>)",
      "is a function <code>N</code> that takes 2 arguments, <code>x</code> and <code>y</code>,",
      "and returns <code>x(...N times...(x(y))...).</code>",
      "By that definition, 0 is <code>KI</code> (just as false),",
      "as it repeats the first argument exactly 0 times,",
      "and 1 is <code>I</code> (easy to confuse)."
    ],
    "link": "80-numerals.json"
  },
  {
    "id": "HxygT90G",
    "name": "Least List Lost Last",
    "intro": [
      "<p>Since there's a pair(x, y) operation in combinatory logic, one can already construct linked lists:",
      "<code>(V x V(y (V z KI)))</code>.",
      "Such approach is very straightforward but requires explicit recursion for almost all operations. </p>",
      "<p>There is, however, another way. ",
      "Much like Church numerals, lists can be encoded as parametric higher order functions:</p>",
      "<p><code>[a, b, c] f x = f a (f b (f c x))</code>.</p>",
      "<p>So a list in this notation is indistinguishable from its <code>fold</code> operation",
      "(or <code>foldr</code> more specifically).</p>",
      "<p>We won't (yet) extend the notation with the <code>[</code> and <code>]</code>;",
      "you can find such syntactic sugar in your favourite programming language.",
      "Instead, we'll use <code>nil</code> to denote an empty list and <code>list val tail</code> for a list node,",
      "where <code>tail</code> is either another node, or <code>nil</code>.",
      "So <code>(list a (list b (list c nil))) f x</code> evaluates to <code>f a (f b (f c x))</code>",
      "and <code>nil f x</code> evaluates to just <code>x</code>.</p>"
    ],
    "link": "90-lists.json"
  },
  {
    "id": "Zc62TKDe",
    "name": "Lists revisited",
    "intro": [
      "<p>Self-reducing lists are all fun and games, but it many applications (such as the LISP family)",
      "simplicity and observability and more practical.",
      "So here comes the linked list: each node is either a pair of (value, next)",
      " - traditionally denoted cons - or a nil.",
      "<code>nil</code> is, of course, <code>KI</code>, and <code>cons</code> is <code>V</code>.",
      "Let's go!</p>"
    ],
    "link": "95-linked-lists.json"
  }
]
