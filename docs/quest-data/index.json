[
  {
    "name": "Baby steps",
    "intro": [
      "<p>Welcome to the wonderful world of combinators. ",
      "The only thing that exists here is functions. ",
      "To be precise, a combinator is a function that takes a combinator and returns a combinator.",
      "And there are also not many of them at the start...",
      "But don't worry, they are <i>powerful enough</i>.<p>"
      ],
    "link": "10-basics.json"
  },
  {
    "name": "Dull tales",
    "intro": [
      "An arbitrary lambda expression can be converted to SKI via the following rules:",
      "<ul>",
      "<li><code>&lambda; x . x &rArr; I</code>;</li>",
      "<li><code>&lambda; x . f(x)</code> (where f is independent of x) <code>&rArr; f</code>;</li>",
      "<li><code>&lambda; x . y</code> (where y does not depend on x) <code>&rArr; K y</code>;</li>",
      "<li><code>&lambda; x . y(z) &rArr; S(&lambda; x . y)(&lambda; x . z)</code>,",
      "where <code>y</code> &amp; <code>z</code> may or may not depend on <code>x</code>.</li>",
      "</ul><br>",
      "Let's grind a bit to gain some XP before we can get to interesting stuff!"
    ],
    "link": "20-lambda.json"
  },
  {
    "name": "Swing, swing!",
    "intro": [
      "Let's move some arguments around.",
      "Just like in many chess and math problems, work backwards:",
      "what &lambda;-expression do you want to see before applying to the last argument?",
      "Then construct it via the above technique and go one argument back,",
      "until you run out of them."
    ],
    "link": "30-arguments.json"
  },
  {
    "name": "The BCKW forest",
    "intro": [
      "<p>As you progress discovering more and more combinators,",
      "you find out that some of them can thrive on their own.",
      "In fact, as you wander further, you find yourself surrounded by a think forest",
      "built entirely of four combinators:",
      "<code>B</code>, <code>C</code>, <code>K</code>, and <code>W</code>.",
      "Can you find the way back?</p>",
      "<p>See also: <a href=\"https://en.wikipedia.org/wiki/B,_C,_K,_W_system\">BCKW system</a>",
      "on wikipedia.</p>"
    ],
    "link": "40-bckw.json"
  },
  {
    "name": "The island of Iota",
    "intro": [
      "Now you know two bases: the SK(I) and the BCKW.",
      "Apparently, there is a one element base: <code>X = x &rarr; xSK</code>. Try it!"
    ],
    "link": "50-iota.json"
  },
  {
    "name": "Boolean logic",
    "intro": [
      "<code>K</code> and <code>KI</code> terms may be interpreted as <b>true</b> and <b>false</b>",
      ", respectively, as <code>K then else</code> will result in <code>then</code>",
      "and <code>KI then else</code> will result in <code>else</code>.",
      "The trick is almost always to feed a function to a boolean value, and not the other way around."
    ],
    "link": "60-boolean.json"
  },
  {
    "name": "Recursion",
    "intro": [
      "Say we need to construct a combinator f that satisfies <code>f x = foo(f, x)</code> for a given <code>foo</code>.",
      "We can't do that directly because both parts contain f.",
      "However, assume <code>f = g g</code>: <br>",
      "<code>g g x = foo((g g) x)</code><br>",
      "Now let's rename one of the g's: <br>",
      "<code>h g x = foo((g g) x)</code><br>",
      "now <code>h</code> can be calculated from here, and <code>h(h)</code> gives f",
      "with the required properties.<br><br>",
      "Be careful though, as immediate execution of <code>h(h)</code> inside <code>h(h)</code>",
      "will hang the interpreter.",
      "You might want to use <code>x &rArr; y &rArr; x(x)</code> combinator from one of the above quests,",
      "or invent your own!"
    ],
    "link": "70-recursion.json"
  }
]
