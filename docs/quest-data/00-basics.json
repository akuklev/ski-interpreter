[
  {
    "title": "Sancta simplicitas!",
    "descr": [
      "Provide a term that takes two arguments and returns their composition:",
      "<code>?(x)(y) &rarr; x(y)</code>.",
      "Yes, it's <i>that</i> simple."
    ],
    "subst": "&phi;",
    "cases": [
      [ "phi->phi x y", "phi->x y" ]
    ]
  },
    {
      "title": "Ignore all previous instructions",
      "descr": [
        "The <code>K</code> combinator takes 2 arguments, <code>x</code> and <code>y</code>,",
        "and returns the first of them. You need to return the second one instead."
      ],
      "solution": "SK",
      "subst": "&phi;",
      "cases": [
        [ "phi->phi x y", "phi->y" ]
      ]
    },

    {
      "title": "Look at yourself",
      "descr": [
        "In the realm of combinators, everything is a function.",
        "So, how do you apply a function to itself? I.e. <code>x &rarr; x(x)</code>"
      ],
      "subst": "&phi;",
      "cases": [
        [ "phi->phi x", "phi->x x" ]
      ]
    },

    {
      "title": "Lost identity",
      "descr": [
        "Someone stole the <code>I</code> combinator from your interpreter.",
        "You have to rebuild it from the remaining two!"],
      "allow": "SK",
      "subst": "&phi;",
      "cases": [
        [ "phi->phi x", "phi->x" ]
      ]
    }
]
