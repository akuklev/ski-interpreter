/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const ski = __webpack_require__(/*! ./lib/ski */ \"./lib/ski.js\");\nconst quest = __webpack_require__(/*! ./lib/quest */ \"./lib/quest.js\");\n\nmodule.exports = { ...ski, ...quest };\nif (typeof window !== 'undefined') {\n  window.SKI = ski.SKI;\n  window.SKI.Quest = quest.Quest;\n}\n\n\n//# sourceURL=webpack://ski-interpreter/./index.js?");

/***/ }),

/***/ "./lib/quest.js":
/*!**********************!*\
  !*** ./lib/quest.js ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { SKI } = __webpack_require__(/*! ./ski */ \"./lib/ski.js\");\n\nclass Quest {\n  /**\n   *\n   * @param {{\n   *    title:string?,\n   *    descr:string?,\n   *    allow: string?,\n   *    numbers: boolean?,\n   *    vars: string[]?,\n   *    cases: [{max: number?, note: string?, feedInput: boolean}|string[], ...string[][]]?\n   * }} options\n   */\n  constructor (options = {}) {\n    const { title, descr, allow, numbers, vars, cases, ...meta } = options;\n    this.engine = new SKI({ allow, numbers });\n    this.vars = {};\n\n    // options.vars is a list of expressions.\n    // we suck all free variables + all term declarations from there into this.vars\n    // to feed it later to every case's parser.\n    if (vars) {\n      for (const term of vars) {\n        const expr = this.engine.parse(term, this.vars);\n        if (expr instanceof SKI.classes.Alias)\n          this.vars[expr.name] = expr.impl;\n      }\n    }\n\n    this.cases = [];\n    this.title = title;\n    this.descr = Array.isArray(descr) ? descr.join(' ') : descr;\n    this.meta = meta;\n\n    for (const c of cases ?? [])\n      this.add(...c);\n  }\n\n  /**\n     *\n     * @param {{note: string?, max: number?}|string} opt\n     * @param {String} terms\n     * @return {Quest}\n     */\n  add (opt = {}, ...terms) {\n    if (typeof opt === 'string') {\n      terms.unshift(opt);\n      opt = {};\n    }\n\n    if (terms.length < 1)\n      throw new Error('Too little data for a testcase');\n\n    this.cases.push( new TestCase(this.engine, this.vars, opt, terms.shift(), ...terms) );\n    return this;\n  }\n\n  /**\n   *\n   * @param {Ast|string} input\n   * @return {{\n   *             expr: Ast?,\n   *             pass: boolean,\n   *             details: {pass: boolean, count: number, found: Ast, expected: Ast, args: Ast[]}[],\n   *             exception: Error?\n   *         }}\n   */\n  check (input) {\n    try {\n      const expr = (typeof input === 'string') ? this.engine.parse(input, this.vars) : input;\n      const details = this.cases.map( c => c.check(expr) );\n      const pass = details.reduce((acc, val) => acc && val.pass, true);\n      return { expr, pass, details };\n    } catch (e) {\n      return { pass: false, details: [], exception: e };\n    }\n  }\n\n  /**\n     *\n     * @return {TestCase[]}\n     */\n  show () {\n    return [...this.cases];\n  }\n}\n\nclass TestCase {\n  /**\n     *\n     * @param {SKI} ski\n     * @param {Object}vars\n     * @param {{max: number?, note: string?, feedInput: boolean}} options\n     * @param {string} expect\n     * @param {string} terms\n     */\n  constructor (ski, vars, options, expect, ...terms) {\n    vars = { ...vars }; // localize to *this* test case\n\n    // vars{} will contain all free variables (i.e. term with unknown definitions) regardless of parsing order\n    this.expect = ski.parse(expect, vars).run({ throw: true }).result;\n    this.max = options.max;\n    this.note = options.note;\n    this.args = terms.map(s => ski.parse(s, vars));\n    this.feedInput = options.feedInput;\n  }\n\n  /**\n     *\n     * @param {Ast} expr\n     * @return {{args: Ast[], found: Ast, pass: boolean, expected: Ast, count: number}}\n     */\n  check (expr) {\n    // TODO include feedInput steps in summary & fail if it hangs\n    const expect = this.feedInput ? this.expect.run({ max: this.max, throw: true }, expr).result : this.expect;\n    const found = expr.run({ max: this.max }, ...this.args);\n\n    return {\n      pass:     found.final && expect.equals(found.result),\n      count:    found.steps,\n      found:    found.result,\n      expected: expect,\n      args:     this.args,\n    };\n  }\n}\n\nmodule.exports = { Quest };\n\n\n//# sourceURL=webpack://ski-interpreter/./lib/quest.js?");

/***/ }),

/***/ "./lib/ski.js":
/*!********************!*\
  !*** ./lib/ski.js ***!
  \********************/
/***/ ((module) => {

eval("/**\n * Combinatory logic simulator\n */\n\nclass Ast {\n  /**\n   * @desc apply self to zero or more terms and return the resulting term,\n   * without performing any calculations whatsoever\n   * @param {Ast} args\n   * @return {Ast}\n   */\n  apply (...args) {\n    return args.length > 0 ? new App(this, ...args) : this;\n  }\n\n  /**\n   * expand all terms but don't perform any calculations\n   * @return {Ast}\n   */\n  expand () {\n    return this;\n  }\n\n  /**\n   * Apply self to list of given args.\n   * Normally, only native combinators know how to do it.\n   * @param {Ast[]} args\n   * @return {Ast|null}\n   */\n  reduce (args) {\n    return null;\n  }\n\n  /**\n   * Replace all instances of free vars with corresponding values and return the resulting expression.\n   * return nulls if no changes could be made, just like step() does, to save memory.\n   * @param {[replace: FreeVar, withValue: Ast][]} list\n   * @return {Ast|null}\n   */\n  subst (list) {\n    return null;\n  }\n\n  /**\n   * @desc iterate one step of calculation in accordance with known rules.\n   *       return the new expression if reduction was possible. or null otherwise\n   * @return {Ast|null}\n   */\n  step () { return null }\n\n  /**\n   * @desc Run uninterrupted sequence of step() applications\n   *       until the expression is irreducible, or max number of steps is reached.\n   *       Default number of steps = 1000.\n   * @param {{max: number?, count: number?, throw: boolean?}|Ast} [opt]\n   * @param {Ast} args\n   * @return {{result: Ast, steps: number, final: boolean}}\n   */\n  run (opt = {}, ...args) {\n    if (opt instanceof Ast) {\n      args.unshift(opt);\n      opt = {};\n    }\n    let expr = args ? this.apply(...args) : this;\n    let steps = opt.count ?? 0;\n    const max = (opt.max ?? 1000) + steps;\n    let final = false;\n    for (; steps < max; steps++ ) {\n      const next = expr.step();\n      if (!next) {\n        final = true;\n        break;\n      }\n      expr = next;\n    }\n    if (opt.throw && !final)\n      throw new Error('Failed to compute expression in ' + max + ' steps');\n    return { final, steps, result: expr };\n  }\n\n  /**\n   *\n   * @param {Ast} other\n   * @return {boolean}\n   */\n  equals (other) {\n    return this === other;\n  }\n\n  /**\n   * @return {string} string representation of the expression\n   */\n  toString () {\n    throw new Error( 'toString() undefined for generic AST' );\n  }\n}\n\nclass App extends Ast {\n  /**\n   * @desc Application of fun() to args\n   * @param {Ast} fun\n   * @param {Ast} args\n   */\n  constructor (fun, ...args) {\n    super();\n    this.fun = fun;\n    this.args = args;\n    this.final = false;\n  }\n\n  apply (...args) {\n    if (args.length === 0)\n      return this;\n    return this.fun.apply( ...this.args, ...args);\n  }\n\n  expand () {\n    return this.fun.expand().apply(...this.args.map(x => x.expand()));\n  }\n\n  subst (list) {\n    const fun = this.fun.subst(list);\n    let change = fun === null ? 0 : 1;\n    const args = [];\n    for (const x of this.args) {\n      const next = x.subst(list);\n      if (next === null)\n        args.push(x);\n      else {\n        args.push(next);\n        change++;\n      }\n    }\n\n    return change ? (fun ?? this.fun).apply(...args) : null;\n  }\n\n  /**\n   * @desc Recursively calculates all terms in the expression. If nothing has to be done,\n   * tries to apply the first n-ary term to first n arguments.\n   * @return {Ast|null}\n   */\n  step () {\n    if (this.final)\n      return null;\n\n    // first try to cut off some subtrees so we don't need to calculate them at all\n    if (this.fun.fast) {\n      const maybe = this.fun.reduce(this.args);\n      if (maybe)\n        return maybe;\n    }\n\n    // if subtrees changed, return new self\n    const fun = this.fun.step();\n    let change = fun ? 1 : 0;\n\n    const args = [];\n    for (const x of this.args) {\n      const next = x.step();\n      args.push(next ?? x);\n      if (next)\n        change++;\n    }\n\n    if (change)\n      return (fun ?? this.fun).apply(...args);\n\n    // if nothing has changed, but the fun knows how to proceed, let it do stuff\n    const reduced = this.fun.reduce(this.args);\n    if (reduced)\n      return reduced;\n\n    // no more reductions can be made\n    this.final = true;\n    return null;\n  }\n\n  equals (other) {\n    if (!(other instanceof App))\n      return false;\n    if (other.args.length !== this.args.length)\n      return false;\n    if (!this.fun.equals(other.fun))\n      return false;\n    for (let i = 0; i < this.args.length; i++) {\n      if (!this.args[i].equals(other.args[i]))\n        return false;\n    }\n    return true;\n  }\n\n  toString () {\n    return this.fun.toString() + this.args.map(x => '(' + x + ')').join('');\n  }\n}\n\nclass Named extends Ast {\n  /**\n   * @desc a constant named 'name'\n   * @param {String} name\n   */\n  constructor (name) {\n    super();\n    this.name = name;\n  }\n\n  toString () {\n    return this.name;\n  }\n}\n\nclass FreeVar extends Named {\n  subst (list) {\n    for (const item of list)\n      if (this === item[0]) return item[1];\n    return null;\n  }\n}\n\nclass Lambda extends Ast {\n  /**\n   * @param {FreeVar[]} args\n   * @param {Ast} impl\n   */\n  constructor (args, impl) {\n    super();\n    if (args.length === 0)\n      throw new Error('empty argument list in lambda');\n    const known = new Set();\n    for (const x of args) {\n      if (known.has(x.name))\n        throw new Error('Duplicate free var name ' + x + ' in lambda expression');\n      known.add(x.name);\n    }\n\n    // We don't know where args come from and whether they are used elsewhere.\n    // So, replace them with fresh free vars with identical names\n    //    and adjust impl accordingly\n    const zip = args.map(x => [x, new FreeVar(x.name)]);\n    this.impl = impl.subst(zip) ?? impl;\n    this.args = zip.map(x => x[1]);\n  }\n\n  reduce (input) {\n    if (input.length < this.args.length)\n      return null;\n\n    const zip = this.args.map( x => [x, input.shift()] );\n\n    return (this.impl.subst(zip) ?? this.impl).apply(...input);\n  }\n\n  subst (list) {\n    const change = this.impl.subst(list);\n    if (change)\n      return new Lambda(this.args, change);\n    return null;\n  }\n\n  equals (other) {\n    if (!(other instanceof Lambda))\n      return false;\n    if (this.args.length !== other.args.length)\n      return false;\n\n    // rename free variables before comparing\n    // note that reduce() is destructive, so we have to shallow copy it\n    const common = this.args.map((_, i) => new FreeVar('t' + i));\n\n    return other.reduce([...common]).equals(this.reduce([...common]));\n  }\n\n  toString () {\n    return '{' + this.args.join('->') + ')->' + this.impl + '}'\n  }\n}\n\nclass Native extends Named {\n  /**\n   * @desc A term named 'name' that converts next 'arity' arguments into\n   *       an expression returned by 'impl' function\n   * @param {String} name\n   * @param {Number} arity\n   * @param {function(...Ast): Ast} impl\n   * @param {{note: string?, fast: boolean?}} opt\n   */\n  constructor (name, arity, impl, opt = {}) {\n    super(name);\n    this.arity = arity;\n    this.impl  = impl;\n    if (opt.fast)\n      this.fast = true;\n    if (opt.note !== undefined)\n      this.note = opt.note;\n  }\n\n  reduce (args) {\n    if (args.length < this.arity)\n      return null;\n    const tail = args.splice(this.arity);\n    return this.impl(...args).apply(...tail);\n  }\n}\n\nclass Church extends Native {\n  constructor (n) {\n    const p = Number.parseInt(n);\n    if (!(p >= 0))\n      throw new Error('Church number must be a nonnegative integer');\n    super('' + p, 2, function (x, y) {\n      let expr = y;\n      for (let i = p; i-- > 0; )\n        expr = x.apply(expr);\n      return expr;\n    });\n  }\n}\n\nclass Alias extends Named {\n  /**\n   * @desc An existing expression under a different name.\n   * @param {String} name\n   * @param {Ast} impl\n   */\n  constructor (name, impl) {\n    super(name);\n    this.impl = impl;\n  }\n\n  expand () {\n    return this.impl.expand();\n  }\n\n  subst (list) {\n    return this.impl.subst(list);\n  }\n\n  step () {\n    return this.impl;\n  }\n\n  equals (other) {\n    return other.equals(this.impl);\n  }\n\n  toString () {\n    return this.outdated ? this.impl.toString() : super.toString();\n  }\n}\n\nclass Empty extends Ast {\n  apply (...args) {\n    return args.length ? args.shift().apply(...args) : this;\n  }\n\n  toString () {\n    return '<empty>';\n  }\n}\n\n/**\n *\n * @type {{[key: string]: Native}}\n */\nconst native = {\n  I: new Native('I', 1, x => x, { fast: true, note: 'x -> x' }),\n  K: new Native('K', 2, (x, _) => x, { fast: true, note: '(x y) -> x' }),\n  S: new Native('S', 3, (x, y, z) => x.apply(z, y.apply(z)), { note: '(x y z) -> x z (y z)' }),\n  B: new Native('B', 3, (x, y, z) => x.apply(y.apply(z)), { note: '(x y z) -> x (y z)' }),\n  C: new Native('C', 3, (x, y, z) => x.apply(z).apply(y), { note: '(x y z) -> x z y' }),\n  W: new Native('W', 2, (x, y) => x.apply(y).apply(y), { note: '(x y) -> x y y' }),\n};\n\nclass SKI {\n  /**\n   *\n   * @param {{allow: string?, numbers: boolean?}} [options]\n   */\n  constructor (options = {}) {\n    this.known = {};\n\n    this.hasNumbers = !!options.numbers;\n    const allow = (options.allow ?? 'SKI');\n    for (const term of allow.split(''))\n      this.known[term] = native[term];\n  }\n\n  /**\n   *\n   * @param {String} name\n   * @param {Ast|String|[number, function(...Ast): Ast, {note: string?, fast: boolean?}]} impl\n   * @param {String} [note]\n   * @return {SKI} chainable\n   */\n  add (name, impl, note ) {\n    if (typeof impl === 'string')\n      impl = new Alias( name, this.parseLine(impl));\n    else if (Array.isArray(impl))\n      impl = new Native(name, impl[0], impl[1], impl[2] ?? {});\n    else if (impl instanceof Ast)\n      impl = new Alias( name, impl );\n    else\n      throw new Error('add: impl must be an Ast, a string, or a [arity, impl] pair');\n\n    if (note !== undefined)\n      impl.note = note;\n    this.known[name] = impl;\n\n    return this;\n  }\n\n  /**\n   *\n   * @param {String} name\n   * @return {SKI}\n   */\n  remove (name) {\n    this.known[name].outdated = true;\n    delete this.known[name];\n    return this;\n  }\n\n  /**\n   *\n   * @return {Object<Ast>}\n   */\n  getTerms () {\n    return { ...this.known };\n  }\n\n  /**\n   *\n   * @param {string} source\n   * @param {{[keys: string]: Ast}} vars\n   */\n  parse (source, vars = {}) {\n    const lines = source.replace(/\\/\\/[^\\n]*\\n/gs, '')\n      .split(/\\s*;[\\s;]*/).filter( s => s.match(/\\S/));\n\n    const jar = { ...vars };\n\n    let expr = new Empty();\n    for (const item of lines) {\n      const [_, save, str] = item.match(/^(?:\\s*([A-Z]|[a-z][a-z_0-9]*)\\s*=\\s*)?(.*)$/s);\n      if (expr instanceof Alias)\n        expr.outdated = true;\n      expr = this.parseLine(str, jar);\n\n      if (save !== undefined) {\n        if (jar[save] !== undefined)\n          throw new Error('Attempt to redefine a known term: ' + save);\n        expr = new Alias(save, expr);\n        jar[save] = expr;\n      }\n    }\n\n    // reimport free variables, so that co-parsing x(y(z)) and z(x(y)) with the same jar\n    //     results in _equal_ free vars and not just ones with the same name\n    for (const name in jar) {\n      if (!vars[name] && jar[name] instanceof SKI.classes.FreeVar)\n        vars[name] = jar[name];\n    }\n\n    return expr;\n  }\n\n  /**\n   *\n   * @param {String} source S(KI)I\n   * @param {{[keys: string]: Ast}} vars\n   * @return {Ast} parsed expression\n   */\n  parseLine (source, vars = {}) {\n    const rex = /([()A-Z]|[a-z_][a-z_0-9]*|\\b[0-9]+\\b)|\\s+|($)|(?:^)/sgy;\n\n    const split = [...source.matchAll(rex)];\n\n    const eol = split.pop();\n    if (eol[2] !== '')\n      throw new Error('Unknown tokens in string starting with ' + source.substring(eol.index));\n\n    // TODO die if unknown non-whitespace\n\n    const tokens = split.map(x => x[1]).filter(x => typeof x !== 'undefined');\n\n    const empty = new Empty();\n    /** @type {Ast[]} */\n    const stack = [empty];\n    const pop = (noEmpty) => {\n      const val = stack.pop();\n      if (noEmpty && val instanceof Empty)\n        throw new Error('Attempt to return () from parser');\n      return val;\n    };\n\n    for (const c of tokens) {\n      // console.log(\"parseLine: found \"+c+\"; stack =\", stack.join(\", \"));\n      if (c === '(')\n        stack.push(empty);\n      else if (c === ')') {\n        if (stack.length < 2)\n          throw new Error('unbalanced input: ' + source);\n        const x = pop(true);\n        const f = pop(false);\n        stack.push(f.apply(x));\n      } else if (c.match(/^[0-9]+$/)) {\n        if (!this.hasNumbers)\n          throw new Error('Church numbers not supported, allow them explicitly');\n        const f = pop(false);\n        stack.push(f.apply(new Church(c)));\n      } else {\n        const f = pop(false);\n        const x = this.known[c] ?? (vars[c] = vars[c] ?? new FreeVar(c));\n        stack.push(f.apply(x));\n      }\n    }\n\n    if (stack.length !== 1)\n      throw new Error('unbalanced input: ' + source);\n\n    return pop(true);\n  }\n}\n\n// Create shortcuts for common terms\n/**\n * Create free var(s) for subsequent use\n * @param {String} names\n * @return {FreeVar[]}\n */\nSKI.free = (...names) => names.map(s => new FreeVar(s));\n\n/**\n * Convert a number to Church encoding\n * @param {number} n\n * @return {Church}\n */\nSKI.church = n => new Church(n);\nSKI.classes = { Ast, Native, Alias, FreeVar, Lambda };\nfor (const name in native)\n  SKI[name] = native[name];\n\nmodule.exports = { SKI };\n\n\n//# sourceURL=webpack://ski-interpreter/./lib/ski.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./index.js");
/******/ 	
/******/ })()
;