(()=>{var t={10:(t,s,e)=>{const r=e(592),n=e(76);t.exports={...r,...n},"undefined"!=typeof window&&(window.SKI=r.SKI,window.SKI.Quest=n.Quest)},76:(t,s,e)=>{const{SKI:r}=e(592),{FreeVar:n,Alias:i,Lambda:a}=r.classes;class o{constructor(t,s={},e={},i=new r){const o=t.length>2?t.shift():void 0,[h,l]=t;this.max=s.max??1e3,this.note=s.note,e={...e};const p=t=>i.parse(t,e).run({max:this.max,throw:!0}).result;if(o){const t=new n(o);e[o]=t,this.e1=new a([t],p(h)),this.e2=new a([t],p(l))}else this.e1=p(h),this.e2=p(l)}check(t){const s=this.e1 instanceof a?this.e1.reduce([t]):this.e1.apply(t),e=s.run({max:this.max}),r=this.e2.expand().run({max:this.max},t);return{pass:e.final&&r.final&&e.result.equals(r.result),count:e.steps+r.steps,start:s,found:e.result,expected:r.result,note:this.note,args:[]}}}t.exports={Quest:class{constructor(t={},s=new r){const{title:e,descr:n,allow:i,numbers:a,vars:o,cases:h,lambdas:l,subst:p,...u}=t;if(this.engine=s,this.restrict={allow:i??"SKI",numbers:a??!1,lambdas:l??!1},this.vars={},this.subst=p??"f",o)for(const t of o){const s=this.engine.parse(t,this.vars);s instanceof r.classes.Alias&&(this.vars[s.name]=s.impl)}this.cases=[],this.title=e,this.descr=Array.isArray(n)?n.join(" "):n,this.meta=u;for(const t of h??[])this.add(...t)}add(t,...s){return"string"==typeof t&&(s.unshift(t),t={}),this.cases.push(new o(s,t,this.vars,this.engine)),this}check(t){try{let s="string"==typeof t?this.engine.parse(t,this.vars,this.restrict):t;this.subst&&(s=new i(this.subst,s));const e=this.cases.map((t=>t.check(s))),r=e.reduce(((t,s)=>t&&s.pass),!0);return{expr:s,pass:r,details:e}}catch(t){return{pass:!1,details:[],exception:t}}}show(){return[...this.cases]}}}},592:t=>{class s{constructor(){if(new.target===s)throw new Error("Attempt to instantiate abstract class Expr")}postParse(){return this}apply(...t){return t.length>0?new e(this,...t):this}expand(){return this}reduce(t){return null}subst(t){return null}step(){return null}run(t={},...e){t instanceof s&&(e.unshift(t),t={});let r=e?this.apply(...e):this,n=t.count??0;const i=(t.max??1e3)+n;let a=!1;for(;n<i;n++){const t=r.step();if(!t){a=!0;break}r=t}if(t.throw&&!a)throw new Error("Failed to compute expression in "+i+" steps");return{final:a,steps:n,result:r}}*walk(t={}){const s=t.max??1/0;let e=0,r=this,n=!1;for(;e<s;){const t=r.step();if(null===t&&(n=!0),yield{expr:r,steps:e,final:n},n)break;r=t,e++}}equals(t){return this===t}toString(){throw new Error("No toString() method defined in class "+this.constructor.name)}}class e extends s{constructor(t,...s){super(),this.fun=t,this.args=s,this.final=!1}apply(...t){return 0===t.length?this:this.fun.apply(...this.args,...t)}expand(){return this.fun.expand().apply(...this.args.map((t=>t.expand())))}subst(t){const s=this.fun.subst(t);let e=null===s?0:1;const r=[];for(const s of this.args){const n=s.subst(t);null===n?r.push(s):(r.push(n),e++)}return e?(s??this.fun).apply(...r):null}step(){if(this.final)return null;if(this.fun.fast){const t=this.fun.reduce(this.args);if(t)return t}const t=this.fun.step();let s=t?1:0;const e=[];for(const t of this.args){const r=t.step();e.push(r??t),r&&s++}if(s)return(t??this.fun).apply(...e);return this.fun.reduce(this.args)||(this.final=!0,null)}equals(t){if(!(t instanceof e))return!1;if(t.args.length!==this.args.length)return!1;if(!this.fun.equals(t.fun))return!1;for(let s=0;s<this.args.length;s++)if(!this.args[s].equals(t.args[s]))return!1;return!0}toString(){return(this.fun instanceof i?"("+this.fun+")":this.fun+"")+this.args.map((t=>"("+t+")")).join("")}}class r extends s{constructor(t){if(super(),"string"!=typeof t||0===t.length)throw new Error("Attempt to create a named term with improper name");this.name=t}toString(){return this.name}}class n extends r{subst(t){for(const s of t)if(this===s[0])return s[1];return null}}class i extends s{constructor(t,s){if(super(),0===t.length)throw new Error("empty argument list in lambda");const e=new Set;for(const s of t){if(e.has(s.name))throw new Error("Duplicate free var name "+s+" in lambda expression");e.add(s.name)}const r=t.map((t=>[t,new n(t.name)]));this.impl=s.subst(r)??s,this.args=r.map((t=>t[1]))}reduce(t){if(t.length<this.args.length)return null;const s=this.args.map(((s,e)=>[s,t[e]]));return(this.impl.subst(s)??this.impl).apply(...t.slice(this.args.length))}subst(t){const s=this.impl.subst(t);return s?new i(this.args,s):null}equals(t){if(!(t instanceof i))return!1;if(this.args.length!==t.args.length)return!1;const s=this.args.map(((t,s)=>new n("t"+s)));return t.reduce([...s]).equals(this.reduce([...s]))}toString(){return this.args.join("->")+"->"+this.impl}}class a extends r{constructor(t,s,e,r={}){super(t),this.arity=s,this.impl=e,r.fast&&(this.fast=!0),void 0!==r.note&&(this.note=r.note)}reduce(t){return t.length<this.arity?null:this.impl(...t.slice(0,this.arity)).apply(...t.slice(this.arity))}}class o extends a{constructor(t){const s=Number.parseInt(t);if(!(s>=0))throw new Error("Church number must be a nonnegative integer");super(""+s,2,(function(t,e){let r=e;for(let e=s;e-- >0;)r=t.apply(r);return r})),this.n=s}equals(t){return t instanceof o&&this.n===t.n}}class h extends r{constructor(t,s){super(t),this.impl=s}expand(){return this.impl.expand()}subst(t){return this.impl.subst(t)}step(){return this.impl}equals(t){return t.equals(this.impl)}toString(){return this.outdated?this.impl.toString():super.toString()}}class l extends s{apply(...t){return t.length?t.shift().apply(...t):this}postParse(){throw new Error("Attempt to use empty expression () as a term")}}class p extends l{constructor(t,s={}){if(super(),this.impl=new l,t instanceof n)this.terms=[t];else{if(!(t instanceof p))throw new Error("Expected FreeVar or PartialLambda");if(!(t.impl instanceof n))throw new Error("Expected FreeVar->...->FreeVar->Expr");this.terms=[...t.terms,t.impl]}}apply(t,...s){if(null===t||0!==s.length)throw new Error("bad syntax in partial lambda expr");return this.impl=this.impl.apply(t),this}postParse(){return new i(this.terms,this.impl)}}const u={I:new a("I",1,(t=>t),{fast:!0,note:"x -> x"}),K:new a("K",2,((t,s)=>t),{fast:!0,note:"x -> y -> x"}),S:new a("S",3,((t,s,e)=>t.apply(e,s.apply(e))),{note:"x -> y -> z -> x z (y z)"}),B:new a("B",3,((t,s,e)=>t.apply(s.apply(e))),{note:"x -> y -> z -> x (y z)"}),C:new a("C",3,((t,s,e)=>t.apply(e).apply(s)),{note:"x -> y -> z -> x z y"}),W:new a("W",2,((t,s)=>t.apply(s).apply(s)),{note:"x -> y -> x y y"})};class c{constructor(t={}){this.known={},this.hasNumbers=t.numbers??!0,this.hasLambdas=t.lambdas??!0,this.known={...u},this.allow=t.allow??Object.keys(u).join("")}add(t,e,r){if("string"==typeof e)e=new h(t,this.parseLine(e));else{if(!(e instanceof s))throw new Error("add: impl must be an Expr or a string");e=new h(t,e)}return void 0!==r&&(e.note=r),this.known[t]=e,this}remove(t){return this.known[t].outdated=!0,delete this.known[t],this}getTerms(){return{...this.known}}parse(t,s={},e={}){const r=t.replace(/\/\/[^\n]*\n/gs,"").split(/\s*;[\s;]*/).filter((t=>t.match(/\S/))),n={...s};let i=new l;for(const t of r){const[s,r,a]=t.match(/^(?:\s*([A-Z]|[a-z][a-z_0-9]*)\s*=\s*)?(.*)$/s);if(i instanceof h&&(i.outdated=!0),i=this.parseLine(a,n,e),void 0!==r){if(void 0!==n[r])throw new Error("Attempt to redefine a known term: "+r);i=new h(r,i),n[r]=i}}for(const t in n)!s[t]&&n[t]instanceof c.classes.FreeVar&&(s[t]=n[t]);return i}parseLine(t,s={},e={}){const r={numbers:e.numbers??this.hasNumbers,lambdas:e.lambdas??this.hasLambdas,allow:new Set((e.allow??this.allow).split(""))},i=[...t.matchAll(/([()A-Z]|[a-z_][a-z_0-9]*|\b[0-9]+\b|->)|($)|(?:^|\s+)/gys)],h=i.pop();if(""!==h[2])throw new Error("Unknown tokens in string starting with "+t.substring(h.index));const u=i.map((t=>t[1])).filter((t=>void 0!==t)),c=new l,f=[c];for(const e of u)if("("===e)f.push(c);else if(")"===e){if(f.length<2)throw new Error("unbalanced input: "+t);const s=f.pop().postParse(),e=f.pop();f.push(e.apply(s))}else if("->"===e){if(!r.lambdas)throw new Error("Lambdas not supported, allow them explicitly");f.push(new p(f.pop(),s))}else if(e.match(/^[0-9]+$/)){if(!r.numbers)throw new Error("Church numbers not supported, allow them explicitly");const t=f.pop();f.push(t.apply(new o(e)))}else{const t=f.pop(),i=this.known[e]??(s[e]=s[e]??new n(e));if(i instanceof a&&!r.allow.has(i.name))throw new Error("Native combinator "+i+" is not in the restricted set "+[...r.allow].sort().join(""));f.push(t.apply(i))}if(1!==f.length)throw new Error("unbalanced input: "+t);return f.pop().postParse()}}c.free=(...t)=>t.map((t=>new n(t))),c.church=t=>new o(t),c.classes={Expr:s,Native:a,Alias:h,FreeVar:n,Lambda:i};for(const t in u)c[t]=u[t];t.exports={SKI:c}}},s={};!function e(r){var n=s[r];if(void 0!==n)return n.exports;var i=s[r]={exports:{}};return t[r](i,i.exports,e),i.exports}(10)})();