(()=>{var t={10:(t,s,e)=>{const n=e(592),r=e(76);t.exports={...n,...r},"undefined"!=typeof window&&(window.SKI=n.SKI,window.SKI.Quest=r.Quest)},76:(t,s,e)=>{const{SKI:n}=e(592);class r{constructor(t,s,e,n,...r){s={...s},this.expect=t.parse(n,s).run({throw:!0}).result,this.max=e.max,this.note=e.note,this.args=r.map((e=>t.parse(e,s))),this.feedInput=e.feedInput}check(t){const s=this.feedInput?this.expect.run({max:this.max,throw:!0},t).result:this.expect,e=t.run({max:this.max},...this.args);return{pass:e.final&&s.equals(e.result),count:e.steps,found:e.result,expected:s,args:this.args}}}t.exports={Quest:class{constructor(t={}){const{title:s,descr:e,allow:r,numbers:i,vars:a,cases:o,...h}=t;if(this.engine=new n({allow:r,numbers:i}),this.vars={},a)for(const t of a){const s=this.engine.parse(t,this.vars);s instanceof n.classes.Alias&&(this.vars[s.name]=s.impl)}this.cases=[],this.title=s,this.descr=Array.isArray(e)?e.join(" "):e,this.meta=h;for(const t of o??[])this.add(...t)}add(t={},...s){if("string"==typeof t&&(s.unshift(t),t={}),s.length<1)throw new Error("Too little data for a testcase");return this.cases.push(new r(this.engine,this.vars,t,s.shift(),...s)),this}check(t){try{const s="string"==typeof t?this.engine.parse(t,this.vars):t,e=this.cases.map((t=>t.check(s))),n=e.reduce(((t,s)=>t&&s.pass),!0);return{expr:s,pass:n,details:e}}catch(t){return{pass:!1,details:[],exception:t}}}show(){return[...this.cases]}}}},592:t=>{class s{apply(...t){return t.length>0?new e(this,...t):this}expand(){return this}reduce(t){return null}step(){return null}run(t={},...e){t instanceof s&&(e.unshift(t),t={});let n=e?this.apply(...e):this,r=t.count??0;const i=(t.max??1e3)+r;let a=!1;for(;r<i;r++){const t=n.step();if(!t){a=!0;break}n=t}if(t.throw&&!a)throw new Error("Failed to compute expression in "+i+" steps");return{final:a,steps:r,result:n}}equals(t){return this===t}toString(){throw new Error("toString() undefined for generic AST")}}class e extends s{constructor(t,...s){super(),this.fun=t,this.args=s,this.final=!1}apply(...t){return 0===t.length?this:this.fun.apply(...this.args,...t)}expand(){return this.fun.expand().apply(...this.args.map((t=>t.expand())))}step(){if(this.final)return null;if(this.fun.fast){const t=this.fun.reduce(this.args);if(t)return t}const t=this.fun.step();let s=t?1:0;const e=[];for(const t of this.args){const n=t.step();e.push(n??t),n&&s++}if(s)return(t??this.fun).apply(...e);return this.fun.reduce(this.args)||(this.final=!0,null)}equals(t){if(!(t instanceof e))return!1;if(t.args.length!==this.args.length)return!1;if(!this.fun.equals(t.fun))return!1;for(let s=0;s<this.args.length;s++)if(!this.args[s].equals(t.args[s]))return!1;return!0}toString(){return this.fun.toString()+this.args.map((t=>"("+t+")")).join("")}}class n extends s{constructor(t){super(),this.name=t}toString(){return this.name}}class r extends n{}class i extends n{constructor(t,s,e,n={}){super(t),this.arity=s,this.impl=e,n.fast&&(this.fast=!0),void 0!==n.note&&(this.note=n.note)}reduce(t){if(t.length<this.arity)return null;const s=t.splice(this.arity);return this.impl(...t).apply(...s)}}class a extends i{constructor(t){const s=Number.parseInt(t);if(!(s>=0))throw new Error("Church number must be a nonnegative integer");super(""+s,2,(function(t,e){let n=e;for(let e=s;e-- >0;)n=t.apply(n);return n}))}}class o extends n{constructor(t,s){super(t),this.impl=s}expand(){return this.impl.expand()}step(){return this.impl}equals(t){return t.equals(this.impl)}toString(){return this.outdated?this.impl.toString():super.toString()}}class h extends s{apply(...t){return t.length?t.shift().apply(...t):this}toString(){return"<empty>"}}const p={I:new i("I",1,(t=>t),{fast:!0,note:"x -> x"}),K:new i("K",2,((t,s)=>t),{fast:!0,note:"(x y) -> x"}),S:new i("S",3,((t,s,e)=>t.apply(e,s.apply(e))),{note:"(x y z) -> x z (y z)"}),B:new i("B",3,((t,s,e)=>t.apply(s.apply(e))),{note:"(x y z) -> x (y z)"}),C:new i("C",3,((t,s,e)=>t.apply(e).apply(s)),{note:"(x y z) -> x z y"}),W:new i("W",2,((t,s)=>t.apply(s).apply(s)),{note:"(x y) -> x y y"})};class u{constructor(t={}){this.known={},this.hasNumbers=!!t.numbers;const s=t.allow??"SKI";for(const t of s.split(""))this.known[t]=p[t]}add(t,e,n){if("string"==typeof e)e=new o(t,this.parseLine(e));else if(Array.isArray(e))e=new i(t,e[0],e[1],e[2]??{});else{if(!(e instanceof s))throw new Error("add: impl must be an Ast, a string, or a [arity, impl] pair");e=new o(t,e)}return void 0!==n&&(e.note=n),this.known[t]=e,this}remove(t){return this.known[t].outdated=!0,delete this.known[t],this}getTerms(){return{...this.known}}parse(t,s={}){const e=t.replace(/\/\/[^\n]*\n/gs,"").split(/\s*;[\s;]*/).filter((t=>t.match(/\S/))),n={...s};let r=new h;for(const t of e){const[s,e,i]=t.match(/^(?:\s*([A-Z]|[a-z][a-z_0-9]*)\s*=\s*)?(.*)$/s);if(r instanceof o&&(r.outdated=!0),r=this.parseLine(i,n),void 0!==e){if(void 0!==n[e])throw new Error("Attempt to redefine a known term: "+e);r=new o(e,r),n[e]=r}}for(const t in n)!s[t]&&n[t]instanceof u.classes.FreeVar&&(s[t]=n[t]);return r}parseLine(t,s={}){const e=[...t.matchAll(/([()A-Z]|[a-z_][a-z_0-9]*|\b[0-9]+\b)|\s+|($)/gys)],n=e.pop();if(""!==n[2])throw new Error("Unknown tokens in string starting with "+t.substring(n.index));const i=e.map((t=>t[1])).filter((t=>void 0!==t)),o=new h,p=[o];for(const e of i)if("("===e)p.push(o);else if(")"===e){if(p.length<2)throw new Error("unbalanced input: "+t);const s=p.pop(),e=p.pop();p.push(e.apply(s))}else if(e.match(/^[0-9]+$/)){if(!this.hasNumbers)throw new Error("Church numbers not supported, allow them explicitly");const t=p.pop();p.push(t.apply(new a(e)))}else{const t=p.pop(),n=this.known[e]??(s[e]=s[e]??new r(e));p.push(t.apply(n))}if(1!==p.length)throw new Error("unbalanced input: "+t);return p[0]}}u.free=t=>new r(t),u.church=t=>new a(t),u.classes={Ast:s,Native:i,Alias:o,FreeVar:r};for(const t in p)u[t]=p[t];t.exports={SKI:u}}},s={};!function e(n){var r=s[n];if(void 0!==r)return r.exports;var i=s[n]={exports:{}};return t[n](i,i.exports,e),i.exports}(10)})();