(()=>{var t={10:(t,s,e)=>{const r=e(592),n=e(76);t.exports={...r,...n},"undefined"!=typeof window&&(window.SKI=r.SKI,window.SKI.Quest=n.Quest)},76:(t,s,e)=>{const{SKI:r}=e(592),{Expr:n,FreeVar:i,Alias:a,Lambda:o}=r.classes;class h{constructor(t,s={},e={},n=new r){if(2!==t.length)throw new Error("Case accepts exactly 2 strings");const[i,a]=t;this.max=s.max??1e3,this.note=s.note,e={...e};const o=t=>n.parse(t,e).run({max:this.max,throw:!0}).expr;this.e1=o(i),this.e2=o(a)}check(t){const s=(t,s)=>t.reduce([s])??t.apply(s),e=s(this.e1,t),r=e.expand().run({max:this.max}),n=s(this.e2,t).expand().run({max:this.max});return{pass:r.final&&n.final&&r.expr.equals(n.expr),steps:r.steps+n.steps,start:e,found:r.expr,expected:n.expr,note:this.note,args:[]}}}t.exports={Quest:class{constructor(t={}){const{title:s,descr:e,allow:n,numbers:i,vars:a,cases:o,lambdas:h,subst:l,engine:p,engineFull:u,...c}=t;if(this.engine=p??new r,this.engineFull=u??new r,this.restrict={allow:n,numbers:i??!1,lambdas:h??!1},this.vars={},this.subst=l??"f",a)for(const t of a){const s=this.engineFull.parse(t,this.vars);s instanceof r.classes.Alias&&(this.vars[s.name]=s.impl)}this.cases=[],this.title=s,this.descr=Array.isArray(e)?e.join(" "):e,this.meta=c;for(const t of o??[])this.add(...t)}add(t,...s){return"string"==typeof t&&(s.unshift(t),t={}),this.cases.push(new h(s,t,this.vars,this.engineFull)),this}check(t){try{let s="string"==typeof t?this.engine.parse(t,this.vars,this.restrict):t;this.subst&&(s=new a(this.subst,s));const e=this.cases.map((t=>t.check(s))),r=e.reduce(((t,s)=>t&&s.pass),!0);return{expr:s,pass:r,details:e}}catch(t){return{pass:!1,details:[],exception:t}}}show(){return[...this.cases]}}}},592:t=>{class s{constructor(){if(new.target===s)throw new Error("Attempt to instantiate abstract class Expr")}postParse(){return this}apply(...t){return t.length>0?new e(this,...t):this}expand(){return this}reduce(t){return null}subst(t){return null}step(){return{steps:0,expr:this}}run(t={},...e){t instanceof s&&(e.unshift(t),t={});let r=e?this.apply(...e):this,n=t.steps??0;const i=(t.max??1e3)+n;let a=!1;for(;n<i;){const t=r.step();if(0===t.steps){a=!0;break}n+=t.steps,r=t.expr}if(t.throw&&!a)throw new Error("Failed to compute expression in "+i+" steps");return{final:a,steps:n,expr:r}}*walk(t={}){const s=t.max??1/0;let e=0,r=this,n=!1;for(;e<s;){const t=r.step();if(0===t.steps&&(n=!0),yield{expr:r,steps:e,final:n},n)break;e+=t.steps,r=t.expr}}equals(t){return this===t}toString(){throw new Error("No toString() method defined in class "+this.constructor.name)}toJSON(){return this.expand().toString()}}class e extends s{constructor(t,...s){super(),this.fun=t,this.args=s,this.final=!1}apply(...t){return 0===t.length?this:this.fun.apply(...this.args,...t)}expand(){return this.fun.expand().apply(...this.args.map((t=>t.expand())))}subst(t){const s=this.fun.subst(t);let e=null===s?0:1;const r=[];for(const s of this.args){const n=s.subst(t);null===n?r.push(s):(r.push(n),e++)}return e?(s??this.fun).apply(...r):null}step(){if(this.final)return{expr:this,steps:0};if(this.fun.fast){const t=this.fun.reduce(this.args);if(t)return{expr:t,steps:1}}let t=0;const s=s=>(t+=s.steps,s.expr),e=s(this.fun.step()),r=this.args.map((t=>s(t.step())));if(t)return{expr:e.apply(...r),steps:t};const n=this.fun.reduce(this.args);return n?{expr:n,steps:1}:(this.final=!0,{expr:this,steps:0})}equals(t){if(!(t instanceof e))return!1;if(t.args.length!==this.args.length)return!1;if(!this.fun.equals(t.fun))return!1;for(let s=0;s<this.args.length;s++)if(!this.args[s].equals(t.args[s]))return!1;return!0}toString(){return(this.fun instanceof i?"("+this.fun+")":this.fun+"")+this.args.map((t=>"("+t+")")).join("")}}class r extends s{constructor(t){if(super(),"string"!=typeof t||0===t.length)throw new Error("Attempt to create a named term with improper name");this.name=t}toString(){return this.name}}class n extends r{subst(t){for(const s of t)if(this===s[0])return s[1];return null}}class i extends s{constructor(t,s){if(super(),0===t.length)throw new Error("empty argument list in lambda");const e=new Set;for(const s of t){if(e.has(s.name))throw new Error("Duplicate free var name "+s+" in lambda expression");e.add(s.name)}const r=t.map((t=>[t,new n(t.name)]));this.impl=s.subst(r)??s,this.args=r.map((t=>t[1]))}reduce(t){if(t.length<this.args.length)return null;const s=this.args.map(((s,e)=>[s,t[e]]));return(this.impl.subst(s)??this.impl).apply(...t.slice(this.args.length))}subst(t){const s=this.impl.subst(t);return s?new i(this.args,s):null}equals(t){if(!(t instanceof i))return!1;if(this.args.length!==t.args.length)return!1;const s=this.args.map(((t,s)=>new n("t"+s)));return t.reduce([...s]).equals(this.reduce([...s]))}toString(){return this.args.join("->")+"->"+this.impl}}class a extends r{constructor(t,s,e,r={}){super(t),this.arity=s,this.impl=e,r.fast&&(this.fast=!0),void 0!==r.note&&(this.note=r.note)}reduce(t){return t.length<this.arity?null:this.impl(...t.slice(0,this.arity)).apply(...t.slice(this.arity))}toJSON(){return"Native:"+this.name}}class o extends a{constructor(t){const s=Number.parseInt(t);if(!(s>=0))throw new Error("Church number must be a nonnegative integer");super(""+s,2,(function(t,e){let r=e;for(let e=s;e-- >0;)r=t.apply(r);return r})),this.n=s}equals(t){return t instanceof o&&this.n===t.n}}class h extends r{constructor(t,s){super(t),this.impl=s}expand(){return this.impl.expand()}subst(t){return this.impl.subst(t)}step(){return{expr:this.impl,steps:1}}equals(t){return t.equals(this.impl)}toString(){return this.outdated?this.impl.toString():super.toString()}}class l extends s{apply(...t){return t.length?t.shift().apply(...t):this}postParse(){throw new Error("Attempt to use empty expression () as a term")}}class p extends l{constructor(t,s={}){if(super(),this.impl=new l,t instanceof n)this.terms=[t];else{if(!(t instanceof p))throw new Error("Expected FreeVar or PartialLambda");if(!(t.impl instanceof n))throw new Error("Expected FreeVar->...->FreeVar->Expr");this.terms=[...t.terms,t.impl]}}apply(t,...s){if(null===t||0!==s.length)throw new Error("bad syntax in partial lambda expr");return this.impl=this.impl.apply(t),this}postParse(){return new i(this.terms,this.impl)}}class u{constructor(...t){const s="$|(\\s+)|"+t.map((t=>"(?:"+t+")")).sort(((t,s)=>s.length-t.length)).join("|");this.rex=new RegExp(s,"gys")}split(t){this.rex.lastIndex=0;const s=[...t.matchAll(this.rex)],e=s.pop()?.index??0;if(e!==t.length)throw new Error("Unknown tokens at pos "+e+"/"+t.length+" starting with "+t.substring(e));return s.filter((t=>void 0===t[1])).map((t=>t[0]))}}const c={I:new a("I",1,(t=>t),{fast:!0,note:"x -> x"}),K:new a("K",2,((t,s)=>t),{fast:!0,note:"x -> y -> x"}),S:new a("S",3,((t,s,e)=>t.apply(e,s.apply(e))),{note:"x -> y -> z -> x z (y z)"}),B:new a("B",3,((t,s,e)=>t.apply(s.apply(e))),{note:"x -> y -> z -> x (y z)"}),C:new a("C",3,((t,s,e)=>t.apply(e).apply(s)),{note:"x -> y -> z -> x z y"}),W:new a("W",2,((t,s)=>t.apply(s).apply(s)),{note:"x -> y -> x y y"})},f=new u("[()]","[A-Z]","[a-z_][a-z_0-9]*","\\b[0-9]+\\b","->");class m{constructor(t={}){this.known={...c},this.hasNumbers=!0,this.hasLambdas=!0,this.allow=new Set(Object.keys(this.known));for(const s in t.terms??{})t.terms[s].match(/^Native:/)||this.add(s,t.terms[s]);this.hasNumbers=t.numbers??!0,this.hasLambdas=t.lambdas??!0,t.allow&&this.restrict(t.allow)}add(t,e,r){if("string"==typeof e)e=new h(t,this.parseLine(e));else{if(!(e instanceof s))throw new Error("add: impl must be an Expr or a string");e=new h(t,e)}return void 0!==r&&(e.note=r),this.known[t]=e,this.allow.add(t),this}maybeAdd(t,s){return this.known[t]?this.allow.add(t):this.add(t,s),this}restrict(t){return this.allow=d(this.allow,t),this}showRestrict(t){return[...d(this.allow,t)].sort().join("")}remove(t){return this.known[t].outdated=!0,delete this.known[t],this.allow.delete(t),this}getTerms(){const t={};for(const s of Object.keys(this.known))this.allow.has(s)&&(t[s]=this.known[s]);return t}parse(t,s={},e={}){const r=t.replace(/\/\/[^\n]*\n/gs,"").split(/\s*;[\s;]*/).filter((t=>t.match(/\S/))),n={...s};let i=new l;for(const t of r){const[s,r,a]=t.match(/^(?:\s*([A-Z]|[a-z][a-z_0-9]*)\s*=\s*)?(.*)$/s);if(i instanceof h&&(i.outdated=!0),i=this.parseLine(a,n,e),void 0!==r){if(void 0!==n[r])throw new Error("Attempt to redefine a known term: "+r);i=new h(r,i),n[r]=i}}for(const t in n)!s[t]&&n[t]instanceof m.classes.FreeVar&&(s[t]=n[t]);return i}parseLine(t,s={},e={}){const r={numbers:e.numbers??this.hasNumbers,lambdas:e.lambdas??this.hasLambdas,allow:d(this.allow,e.allow)},i=f.split(t),a=new l,h=[a];for(const e of i)if("("===e)h.push(a);else if(")"===e){if(h.length<2)throw new Error("unbalanced input: "+t);const s=h.pop().postParse(),e=h.pop();h.push(e.apply(s))}else if("->"===e){if(!r.lambdas)throw new Error("Lambdas not supported, allow them explicitly");h.push(new p(h.pop(),s))}else if(e.match(/^[0-9]+$/)){if(!r.numbers)throw new Error("Church numbers not supported, allow them explicitly");const t=h.pop();h.push(t.apply(new o(e)))}else{const t=h.pop();if(this.known[e]&&!r.allow.has(e))throw new Error("Term "+e+" is not in the restricted set "+[...r.allow].sort().join(" "));const i=this.known[e]??(s[e]=s[e]??new n(e));h.push(t.apply(i))}if(1!==h.length)throw new Error("unbalanced input: "+t);return h.pop().postParse()}toJSON(){return{allow:this.showRestrict("+"),numbers:this.hasNumbers,lambdas:this.hasLambdas,terms:this.getTerms()}}}const w=new u("[-=+]","[A-Z]","\b[a-z_][a-z_0-9]*\b");function d(t,s){if(!s)return t;let e=new Set([...t]),r=0;const n=[t=>{e=new Set([t]),r=1},t=>{e.add(t)},t=>{e.delete(t)}];for(const t of w.split(s))"="===t?r=0:"+"===t?r=1:"-"===t?r=2:n[r](t);return e}m.free=(...t)=>t.map((t=>new n(t))),m.church=t=>new o(t),m.classes={Expr:s,Native:a,Alias:h,FreeVar:n,Lambda:i};for(const t in c)m[t]=c[t];t.exports={SKI:m}}},s={};!function e(r){var n=s[r];if(void 0!==n)return n.exports;var i=s[r]={exports:{}};return t[r](i,i.exports,e),i.exports}(10)})();