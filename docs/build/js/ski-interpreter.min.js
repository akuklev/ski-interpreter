(()=>{var t={10:(t,e,s)=>{const r=s(755),n=s(76);t.exports={...r,...n},"undefined"!=typeof window&&(window.SKI=r.SKI,window.SKI.Quest=n.Quest)},695:(t,e,s)=>{const{missingIndices:r}=s(502);class n{constructor(){if(new.target===n)throw new Error("Attempt to instantiate abstract class Expr");this.arity=1/0}postParse(){return this}apply(...t){return t.length>0?new l(this,...t):this}expand(){return this}freeVars(){return new Set}guessArity(t={}){const e=t.max??1e3,s=t.maxArgs??32;let n=this;const i=[];for(let t=0;t<s;t++){const s=n.run({max:e});if(!s.final)break;if(n=s.expr,!n.hasReduction()){const e=r(i,n.freeVars());return{arity:t,proper:n.hasOnly(new Set(i)),found:!0,canonical:i.length?new d(i,n):n,...e.size?{skip:e}:{}}}const a=new f("x"+t);i.push(a),n=n.apply(a)}return{proper:!1,found:!1}}hasOnly(t){return t.has(this)}hasReduction(){return!0}reduce(t){return null}subst(t,e){return null}step(){return{steps:0,expr:this}}run(t={},...e){t instanceof n&&(e.unshift(t),t={});let s=e?this.apply(...e):this,r=t.steps??0;const i=(t.max??1e3)+r;let a=!1;for(;r<i;){const t=s.step();if(0===t.steps){a=!0;break}r+=t.steps,s=t.expr}if(t.throw&&!a)throw new Error("Failed to compute expression in "+i+" steps");return{final:a,steps:r,expr:s}}*walk(t={}){const e=t.max??1/0;let s=0,r=this,n=!1;for(;s<e;){const t=r.step();if(0===t.steps&&(n=!0),yield{expr:r,steps:s,final:n},n)break;s+=t.steps,r=t.expr}}equals(t){return this===t}expect(t){if(!(t instanceof n))throw new Error("Attempt to expect a combinator to equal something else: "+t);if(this.equals(t))return;const e=new Error("Found term "+this+" but expected "+t);throw e.expected=t.toString(),e.actual=this.toString(),e}toString(t={}){throw new Error("No toString() method defined in class "+this.constructor.name)}needsParens(){return!1}toJSON(){return this.expand().toString({terse:!1})}}const[i,a,o,h]=function*(){for(let t=0;;yield t++);}(),p=new Set([(a<<4)+a,(a<<4)+o,(o<<4)+a,(o<<4)+o,(o<<4)+h,(h<<4)+a,(i<<4)+a]);class l extends n{constructor(t,...e){super(),this.fun=t,this.args=e,this.final=!1}freeVars(){return new Set([...this.fun.freeVars(),...this.args.flatMap((t=>[...t.freeVars()]))])}hasOnly(t){for(const e of[this.fun,...this.args])if(!e.hasOnly(t))return!1;return!0}hasReduction(){return this.fun.hasReduction()}apply(...t){return 0===t.length?this:this.fun.apply(...this.args,...t)}expand(){return this.fun.expand().apply(...this.args.map((t=>t.expand())))}subst(t,e){const s=this.fun.subst(t,e);let r=null===s?0:1;const n=[];for(const s of this.args){const i=s.subst(t,e);null===i?n.push(s):(n.push(i),r++)}return r?(s??this.fun).apply(...n):null}step(){if(this.final)return{expr:this,steps:0};let t=0;const e=this.fun.skip,s=(s,r)=>{if(e&&e.has(r))return s;const n=s.step();return t+=n.steps,n.expr},r=s(this.fun,-1),n=this.args.map(s),i=r.reduce(n);return i?{expr:i,steps:t+1}:t?{expr:r.apply(...n),steps:t}:(this.final=!0,{expr:this,steps:0})}equals(t){if(!(t instanceof l))return!1;if(t.args.length!==this.args.length)return!1;if(!this.fun.equals(t.fun))return!1;for(let e=0;e<this.args.length;e++)if(!this.args[e].equals(t.args[e]))return!1;return!0}toString(t={}){if(t.terse){const e=[];let s=0;for(const r of[this.fun,...this.args]){let n=r.toString(t),l=i;n.match(/^[A-Z]$/)?l=o:n.match(/^[a-z][a-z_0-9]*$/)?l=h:n.match(/^[0-9]+$/)||(0!==e.length||r.needsParens())&&(n="("+n+")",l=a),!p.has(s<<4|l)&&e.length>0&&e.push(" "),e.push(n),s=l}return e.join("")}return(this.fun.needsParens()?"("+this.fun+")":this.fun+"")+this.args.map((t=>"("+t+")")).join("")}}class u extends n{constructor(t){if(super(),"string"!=typeof t||0===t.length)throw new Error("Attempt to create a named term with improper name");this.name=t}toString(){return this.name}}let c=0;class f extends u{constructor(t){super(t),this.id=++c}subst(t,e){return this===t?e:null}freeVars(){return new Set([this])}hasReduction(){return!1}}class d extends n{constructor(t,e){if(Array.isArray(t)){if(0===t.length)throw new Error("empty argument list in lambda constructor");const[s,...r]=t,n=new Set([s.name]);for(;r.length>0;){const t=r.pop();if(n.has(t.name))throw new Error("Duplicate free var name "+t+" in lambda expression");n.add(t.name),e=new d(t,e)}t=s}super();const s=new f(t.name);this.arg=s,this.impl=e.subst(t,s)??e,this.arity=1}freeVars(){const t=this.impl.freeVars();return t.delete(this.arg),t}reduce(t){if(0===t.length)return null;const[e,...s]=t;return(this.impl.subst(this.arg,e)??this.impl).apply(...s)}subst(t,e){if(t===this.arg)return null;const s=this.impl.subst(t,e);return s?new d(this.arg,s):null}expand(){return new d(this.arg,this.impl.expand())}equals(t){if(!(t instanceof d))return!1;const e=new f("t");return t.reduce([e]).equals(this.reduce([e]))}toString(t={}){return this.arg+"->"+this.impl.toString(t)}needsParens(){return!0}}class m extends u{constructor(t,e,s,r={}){super(t),this.arity=e,this.impl=s,void 0!==r.skip&&(this.skip=new Set(r.skip)),void 0!==r.note&&(this.note=r.note)}reduce(t){return t.length<this.arity?null:this.impl(...t.slice(0,this.arity)).apply(...t.slice(this.arity))}toJSON(){return"Native:"+this.name}}class w extends m{constructor(t){const e=Number.parseInt(t);if(!(e>=0))throw new Error("Church number must be a nonnegative integer");super(""+e,2,(function(t,s){let r=s;for(let s=e;s-- >0;)r=t.apply(r);return r})),this.n=e,this.arity=2}equals(t){return t instanceof w&&this.n===t.n}}t.exports={Expr:n,App:l,FreeVar:f,Lambda:d,Native:m,Alias:class extends u{constructor(t,e){super(t),this.impl=e;const s=e.guessArity();this.arity=s.found&&s.proper&&s.arity||0,this.skip=s.skip}freeVars(){return this.impl.freeVars()}expand(){return this.impl.expand()}subst(t,e){return this.impl.subst(t,e)}reduce(t){return t.length<this.arity?null:this.impl.apply(...t)}hasReduction(){return this.impl.hasReduction()}equals(t){return t.equals(this.impl)}toString(t){return this.outdated?this.impl.toString(t):super.toString(t)}needsParens(){return!!this.outdated&&this.impl.needsParens()}},Church:w}},677:(t,e,s)=>{const{Expr:r,Church:n,FreeVar:i,App:a}=s(695),o={};class h extends r{constructor(t,e={}){if(super(),this.name=t,this.arity=e.arity??1,e.onReduce){const t=e.onReduce;this.reduce=function(e){if(e.length<this.arity)return null;const s=e.slice(0,this.arity),r=e.slice(this.arity);return t.apply(this,[s]).apply(...r)}}}register(){return o[this]=this,this}toString(t={}){return"!"+this.name}}new h("nat",{onReduce:function(t){const e=new i("x"),s=new i("y"),r=t[0].run({max:133120},e,s);if(!r.final)throw new Error(`Church number coercion failed: expression didn't terminate in 133120 steps: ${t[0]}`);let o=r.expr,h=0;for(;;){if(o===s)return new n(h);if(!(o instanceof a&&o.fun===e&&1===o.args.length))throw new Error("Church number coercion failed: expression is not a number: "+t[0]);h++,o=o.args[0]}}}).register(),t.exports={Inspector:h,inspectors:o}},755:(t,e,s)=>{const{Tokenizer:r,restrict:n}=s(502),{Expr:i,App:a,FreeVar:o,Lambda:h,Native:p,Alias:l,Church:u}=s(695),{Inspector:c,inspectors:f}=s(677);class d extends i{apply(...t){return t.length?t.shift().apply(...t):this}postParse(){throw new Error("Attempt to use empty expression () as a term")}}class m extends d{constructor(t,e={}){if(super(),this.impl=new d,t instanceof o)this.terms=[t];else{if(!(t instanceof m))throw new Error("Expected FreeVar or PartialLambda");if(!(t.impl instanceof o))throw new Error("Expected FreeVar->...->FreeVar->Expr");this.terms=[...t.terms,t.impl]}}apply(t,...e){if(null===t||0!==e.length)throw new Error("bad syntax in partial lambda expr");return this.impl=this.impl.apply(t),this}postParse(){return new h(this.terms,this.impl)}}const w=new r("[()]","[A-Z]","[a-z_][a-z_0-9]*","\\b[0-9]+\\b","->","![a-z][a-z_0-9]*\\b");class g{constructor(t={}){this.known={...x},this.hasNumbers=!0,this.hasLambdas=!0,this.allow=new Set(Object.keys(this.known)),(t.inspectors??1)&&(this.inspectors={...f});for(const e in t.terms??{})t.terms[e].match(/^Native:/)||this.add(e,t.terms[e]);this.hasNumbers=t.numbers??!0,this.hasLambdas=t.lambdas??!0,t.allow&&this.restrict(t.allow)}add(t,e,s){if("string"==typeof e)e=new l(t,this.parseLine(e));else{if(!(e instanceof i))throw new Error("add: impl must be an Expr or a string");e=new l(t,e)}return void 0!==s&&(e.note=s),this.known[t]=e,this.allow.add(t),this}maybeAdd(t,e){return this.known[t]?this.allow.add(t):this.add(t,e),this}restrict(t){return this.allow=n(this.allow,t),this}showRestrict(t="+"){const e=[];let s=!0;for(const r of[...n(this.allow,t)].sort()){const t=r.match(/^[A-Z]$/);!e.length||s&&t||e.push(" "),e.push(r),s=t}return e.join("")}remove(t){return this.known[t].outdated=!0,delete this.known[t],this.allow.delete(t),this}getTerms(){const t={};for(const e of Object.keys(this.known))this.allow.has(e)&&(t[e]=this.known[e]);return t}parse(t,e={},s={}){const r=t.replace(/\/\/[^\n]*$/gm,"").split(/\s*;[\s;]*/).filter((t=>t.match(/\S/))),n={...e};let i=new d;for(const t of r){const[e,r,a]=t.match(/^(?:\s*([A-Z]|[a-z][a-z_0-9]*)\s*=\s*)?(.*)$/s);if(i instanceof l&&(i.outdated=!0),i=this.parseLine(a,n,s),void 0!==r){if(void 0!==n[r])throw new Error("Attempt to redefine a known term: "+r);i=new l(r,i),n[r]=i}}for(const t in n)!e[t]&&n[t]instanceof g.classes.FreeVar&&(e[t]=n[t]);return i}parseLine(t,e={},s={}){const r={numbers:s.numbers??this.hasNumbers,lambdas:s.lambdas??this.hasLambdas,allow:n(this.allow,s.allow)},i=w.split(t),a=new d,h=[a];for(const s of i)if("("===s)h.push(a);else if(")"===s){if(h.length<2)throw new Error("unbalanced input: extra closing parenthesis"+t);const e=h.pop().postParse(),s=h.pop();h.push(s.apply(e))}else if("->"===s){if(!r.lambdas)throw new Error("Lambdas not supported, allow them explicitly");h.push(new m(h.pop(),e))}else if(s.match(/^[0-9]+$/)){if(!r.numbers)throw new Error("Church numbers not supported, allow them explicitly");const t=h.pop();h.push(t.apply(new u(s)))}else if(s.startsWith("!")){const t=this.inspectors[s];if(!t)throw new Error("Unknown inspector term "+s);h.push(h.pop().apply(t))}else{const t=h.pop();if(!e[s]&&this.known[s]&&!r.allow.has(s))throw new Error("Term "+s+" is not in the restricted set "+[...r.allow].sort().join(" "));const n=e[s]??this.known[s]??(e[s]=new o(s));h.push(t.apply(n))}if(1!==h.length)throw new Error("unbalanced input: missing "+(h.length-1)+" closing parenthesis:"+t);return h.pop().postParse()}toJSON(){return{allow:this.showRestrict("+"),numbers:this.hasNumbers,lambdas:this.hasLambdas,terms:this.getTerms()}}}g.free=(...t)=>t.map((t=>new o(t))),g.church=t=>new u(t),g.classes={Expr:i,Native:p,Alias:l,FreeVar:o,Lambda:h,Inspector:c};const x={I:new p("I",1,(t=>t),{note:"x -> x"}),K:new p("K",2,((t,e)=>t),{skip:[1],note:"x -> y -> x"}),S:new p("S",3,((t,e,s)=>t.apply(s,e.apply(s))),{note:"x -> y -> z -> x z (y z)"}),B:new p("B",3,((t,e,s)=>t.apply(e.apply(s))),{note:"x -> y -> z -> x (y z)"}),C:new p("C",3,((t,e,s)=>t.apply(s).apply(e)),{note:"x -> y -> z -> x z y"}),W:new p("W",2,((t,e)=>t.apply(e).apply(e)),{note:"x -> y -> x y y"})};for(const t in x)g[t]=x[t];g.native=x,t.exports={SKI:g}},76:(t,e,s)=>{const{SKI:r}=s(755),{Expr:n,FreeVar:i,Alias:a,Lambda:o}=r.classes;class h{constructor(t,e,s={},n={},i=new r){if(2!==e.length)throw new Error("Case accepts exactly 2 strings");const[a,h]=e;this.max=s.max??1e3,this.note=s.note,n={...n};const p=e=>new o(t,i.parse(e,n));this.e1=p(a),this.e2=p(h)}check(...t){const e=(t,e)=>t.reduce(e)??t.apply(...e),s=e(this.e1,t),r=s.expand().run({max:this.max}),n=e(this.e2,t).expand().run({max:this.max});return{pass:r.final&&n.final&&r.expr.equals(n.expr),steps:r.steps+n.steps,start:s,found:r.expr,expected:n.expr,note:this.note,args:t}}}t.exports={Quest:class{constructor(t={}){const{input:e,vars:s,cases:n,allow:i,numbers:a,lambdas:o,subst:h,engine:p,engineFull:l,...u}=t;this.engine=p??new r,this.engineFull=l??new r,this.restrict={allow:i,numbers:a??!1,lambdas:o??!1},this.vars={},this.subst=Array.isArray(h)?h:[h??"phi"];for(const t of s??[]){const e=this.engineFull.parse(t,this.vars);e instanceof r.classes.Alias&&(this.vars[e.name]=e.impl)}if(this.input=r.free(...Array.isArray(e)?e:[e]),0===e.length)throw new Error("input parameter must be string or string[]");this.varsFull={...this.vars};for(const t of this.input){if(t.name in this.varsFull)throw new Error("input placeholder name is duplicated or clashes with vars: "+t.name);this.varsFull[t.name]=t}var c;this.cases=[],this.title=u.title,u.descr=void 0===(c=u.descr)?c:Array.isArray(c)?c.join(" "):""+c,this.descr=u.descr,this.meta=u;for(const t of n??[])this.add(...t)}add(t,...e){return"string"==typeof t&&(e.unshift(t),t={}),this.cases.push(new h(this.input,e,t,this.varsFull,this.engineFull)),this}check(...t){try{if(t.length!==this.input.length)throw new Error("Solutions provided "+t.length+" terms where "+this.input.length+" are expected");const e=t.map((t=>"string"==typeof t?this.engine.parse(t,this.vars,this.restrict):t)).map(((t,e)=>new a(this.subst[e]??this.input[e],t))),s=this.cases.map((t=>t.check(...e))),r=s.reduce(((t,e)=>t&&e.pass),!0);return{expr:e[0],pass:r,details:s}}catch(t){return{pass:!1,details:[],exception:t}}}show(){return[...this.cases]}}}},502:t=>{class e{constructor(...t){const e="$|(\\s+)|"+t.map((t=>"(?:"+t+")")).sort(((t,e)=>e.length-t.length)).join("|");this.rex=new RegExp(e,"gys")}split(t){this.rex.lastIndex=0;const e=[...t.matchAll(this.rex)],s=e.pop()?.index??0;if(s!==t.length)throw new Error("Unknown tokens at pos "+s+"/"+t.length+" starting with "+t.substring(s));return e.filter((t=>void 0===t[1])).map((t=>t[0]))}}const s=new e("[-=+]","[A-Z]","\\b[a-z_][a-z_0-9]*\\b");t.exports={Tokenizer:e,restrict:function(t,e){if(!e)return t;let r=new Set([...t]),n=0;const i=[t=>{r=new Set([t]),n=1},t=>{r.add(t)},t=>{r.delete(t)}];for(const t of s.split(e))"="===t?n=0:"+"===t?n=1:"-"===t?n=2:i[n](t);return r},missingIndices:function(t,e){const s=new Set;for(let r=0;r<t.length;r++)e.has(t[r])||s.add(r);return s}}}},e={};!function s(r){var n=e[r];if(void 0!==n)return n.exports;var i=e[r]={exports:{}};return t[r](i,i.exports,s),i.exports}(10)})();