(()=>{var t={10:(t,e,s)=>{const n=s(755),r=s(76);t.exports={...n,...r},"undefined"!=typeof window&&(window.SKI=n.SKI,window.SKI.Quest=r.Quest)},695:(t,e,s)=>{const{skipDup:n,isSubset:r}=s(502),i={terse:!0,max:1e3,maxArgs:32};class a{constructor(){if(new.target===a)throw new Error("Attempt to instantiate abstract class Expr");this.arity=1/0}postParse(){return this}apply(...t){return t.length>0?new u(this,...t):this}expand(){return this}freeVars(){const t=this.getSymbols(),e=new Set;for(const[s,n]of t)s instanceof d&&e.add(s);return e}hasLambda(){return this.getSymbols().has(a.lambdaPlaceholder)}freeOnly(){for(const[t,e]of this.getSymbols())if(!(t instanceof d))return!1;return!0}getSymbols(){return new Map([[this,1]])}weight(){return 1}canonize(t={}){const e=t.max??i.max,s=t.maxArgs??i.maxArgs;let a=0,o=this;const h=[];for(let t=0;t<s;t++){const s=o.run({max:e});if(a+=s.steps,!s.final)break;if(o=s.expr,!o.wantsArgs()){const e=o.getSymbols(),[s,i]=n(h,e),p=r(e.keys(),new Set(h)),l=p&&0===s.size&&0===i.size;return{arity:t,found:!0,canonical:v(h,o),proper:p,linear:l,steps:a,...s.size?{skip:s}:{},...i.size?{dup:i}:{}}}const i=new d("abcdefgh"[t]??"x"+t);h.push(i),o=o.apply(i)}const p={found:!1,proper:!1,steps:a};return t.bestGuess&&(p.canonical=t.bestGuess),p}*lambdify(t={}){const e=A(this);yield*k(e,t)}*rewriteSKI(t={}){let e=0,s=this;for(;;){const n={max:t.max??1,steps:0},r=s._rski(n),i=0===n.steps;if(yield{expr:s,steps:e,final:i},i)break;s=r,e+=n.steps}}renameVars(t){return this}_rski(t){return this}wantsArgs(){return!0}reduce(t){return null}subst(t,e){return null}step(){return{expr:this,steps:0,changed:!1}}run(t={},...e){t instanceof a&&(e.unshift(t),t={});let s=e?this.apply(...e):this,n=t.steps??0;const r=(t.max??i.max)+n;let o=!1;for(;n<r;){const t=s.step();if(!t.changed){o=!0;break}n+=t.steps,s=t.expr}if(t.throw&&!o)throw new Error("Failed to compute expression in "+r+" steps");return{final:o,steps:n,expr:s}}*walk(t={}){const e=t.max??1/0;let s=0,n=this,r=!1;for(;s<e;){const t=n.step();if(t.changed||(r=!0),yield{expr:n,steps:s,final:r},r)break;s+=t.steps,n=t.expr}}equals(t){return this===t}contains(t){return this===t||this.equals(t)}expect(t){if(!(t instanceof a))throw new Error("Attempt to expect a combinator to equal something else: "+t);if(this.equals(t))return;const e=new Error("Found term "+this+" but expected "+t);throw e.expected=t.toString(),e.actual=this.toString(),e}toString(t={}){throw new Error("No toString() method defined in class "+this.constructor.name)}needsParens(){return!1}toJSON(){return this.expand().toString({terse:!1})}}const[o,h,p,l]=function*(){for(let t=0;;yield t++);}(),c=new Set([(h<<4)+h,(h<<4)+p,(p<<4)+h,(p<<4)+p,(p<<4)+l,(l<<4)+h,(o<<4)+h]);class u extends a{constructor(t,...e){if(0===e.length)throw new Error("Attempt to create an application with no arguments (likely interpreter bug)");super(),this.fun=t,this.args=e,this.final=!1}weight(){return this.args.reduce(((t,e)=>t+e.weight()),this.fun.weight())}getSymbols(){const t=this.fun.getSymbols();for(const e of this.args)for(const[s,n]of e.getSymbols())t.set(s,(t.get(s)??0)+n);return t}wantsArgs(){return this.fun.wantsArgs()}apply(...t){return 0===t.length?this:this.fun.apply(...this.args,...t)}expand(){return this.fun.expand().apply(...this.args.map((t=>t.expand())))}canonize(t={}){const[e,s]=this.split().map((e=>e.canonize(t).canonical));return super.canonize({...t,...e&&s?{bestGuess:e.apply(s)}:{}})}renameVars(t){const e=this.fun.renameVars(t),s=this.args.map((e=>e.renameVars(t)));return e.apply(...s)}subst(t,e){const s=this.fun.subst(t,e);let n=null===s?0:1;const r=[];for(const s of this.args){const i=s.subst(t,e);null===i?r.push(s):(r.push(i),n++)}return n?(s??this.fun).apply(...r):null}step(){if(!this.final){const t=this.fun.reduce(this.args);if(t)return{expr:t,steps:1,changed:!0};const e=this.fun.step();if(e.changed)return{expr:e.expr.apply(...this.args),steps:e.steps,changed:!0};for(let t=0;t<this.args.length;t++){const e=this.args[t].step();if(!e.changed)continue;const s=this.args.slice();return s[t]=e.expr,{expr:this.fun.apply(...s),steps:e.steps,changed:!0}}}return this.final=!0,{expr:this,steps:0,changed:!1}}split(){const t=this.args.slice(),e=t.pop();return[this.fun.apply(...t),e]}_rski(t){return t.steps>=t.max?this:this.fun._rski(t).apply(...this.args.map((e=>e._rski(t))))}equals(t){if(!(t instanceof u))return!1;if(t.args.length!==this.args.length)return!1;if(!this.fun.equals(t.fun))return!1;for(let e=0;e<this.args.length;e++)if(!this.args[e].equals(t.args[e]))return!1;return!0}contains(t){if(this.fun.contains(t))return!0;for(const e of this.args)if(e.contains(t))return!0;return super.contains(t)}toString(t={}){if(t.terse??i.terse){const e=[];let s=0;for(const n of[this.fun,...this.args]){let r=n.toString(t),i=o;r.match(/^[A-Z]$/)?i=p:n instanceof d||r.match(/^[a-z][a-z_0-9]*$/)?i=l:r.match(/^[0-9]+$/)||(0!==e.length||n.needsParens())&&(r="("+r+")",i=h),!c.has(s<<4|i)&&e.length>0&&e.push(" "),e.push(r),s=i}return e.join("")}{const e=this.fun.toString(t);return(this.fun.needsParens()?"("+e+")":e)+this.args.map((e=>"("+e.toString(t)+")")).join("")}}}class m extends a{constructor(t){if(super(),"string"!=typeof t||0===t.length)throw new Error("Attempt to create a named term with improper name");this.name=t}toString(){return this.name}}let f=0;class d extends m{constructor(t){super(t),this.id=++f}subst(t,e){return this===t?e:null}weight(){return 0}wantsArgs(){return!1}toString(t={}){return t.html&&/^[a-z]$/.test(this.name)?"<var>"+this.name+"</var>":this.name}}class w extends m{constructor(t,e,s={}){super(t),this.impl=e,s.apply&&(this.onApply=s.apply),this.arity=s.arity??1;const n=s.canonize??1?this.canonize():{found:!1};s.arity||(this.arity=n.arity||1),this.note=s.note??n.canonical?.toString({terse:!0,html:!0})}apply(...t){if(this.onApply&&t.length>=1){if("function"!=typeof this.onApply)throw new Error("Native combinator "+this+" has an invalid onApply property  of type"+typeof this.onApply+": "+this.onApply);const e=this.onApply(t[0]);if(e instanceof a)return e.apply(...t.slice(1))}return super.apply(...t)}_rski(t){if(this===g.I||this===g.K||this===g.S||t.steps>=t.max)return this;const e=this.canonize().canonical;return e?(t.steps++,e._rski(t)):this}reduce(t){if(t.length<this.arity)return null;let e=0,s=this.impl;for(;"function"==typeof s;){if(e>=t.length)return null;s=s(t[e++])}if(!(s instanceof a))throw new Error("Native combinator "+this+" reduced to a non-expression: "+s);return s.apply(...t.slice(e))}toJSON(){return"Native:"+this.name}}const g={};function y(t,e,s){g[t]=new w(t,e,s)}class x extends a{constructor(t,e){if(Array.isArray(t)){if(0===t.length)throw new Error("empty argument list in lambda constructor");const[s,...n]=t,r=new Set([s.name]);for(;n.length>0;){const t=n.pop();if(r.has(t.name))throw new Error("Duplicate free var name "+t+" in lambda expression");r.add(t.name),e=new x(t,e)}t=s}super();const s=new d(t.name);this.arg=s,this.impl=e.subst(t,s)??e,this.arity=1}getSymbols(){const t=this.impl.getSymbols();return t.delete(this.arg),t.set(a.lambdaPlaceholder,(t.get(a.lambdaPlaceholder)??0)+1),t}weight(){return this.impl.weight()+1}reduce(t){if(0===t.length)return null;const[e,...s]=t;return(this.impl.subst(this.arg,e)??this.impl).apply(...s)}subst(t,e){if(t===this.arg)return null;const s=this.impl.subst(t,e);return s?new x(this.arg,s):null}expand(){return new x(this.arg,this.impl.expand())}renameVars(t){const e=new d(t.next().value),s=this.impl.subst(this.arg,e)??this.impl;return new x(e,s.renameVars(t))}_rski(t){const e=this.impl._rski(t);if(t.steps>=t.max)return new x(this.arg,e);if(t.steps++,e===this.arg)return g.I;if(!e.getSymbols().has(this.arg))return g.K.apply(e);if(e instanceof u){const[s,n]=e.split();return n!==this.arg||s.getSymbols().has(this.arg)?g.S.apply(new x(this.arg,s)._rski(t),new x(this.arg,n)._rski(t)):s._rski(t)}throw new Error("Don't know how to convert to SKI"+this)}equals(t){if(!(t instanceof x))return!1;const e=new d("t");return t.reduce([e]).equals(this.reduce([e]))}contains(t){return this.equals(t)||this.impl.contains(t)}toString(t={}){const e=t.html?" &mapsto; ":"->";return this.arg.toString(t)+e+this.impl.toString(t)}needsParens(){return!0}}class b extends w{constructor(t){const e=Number.parseInt(t);if(!(e>=0))throw new Error("Church number must be a non-negative integer");const s=""+e;super(s,(t=>s=>{let n=s;for(let s=e;s-- >0;)n=t.apply(n);return n}),{arity:2,canonize:!1,note:s}),this.n=e,this.arity=2}equals(t){return t instanceof b&&this.n===t.n}}class S extends m{constructor(t,e,s={}){super(t),this.impl=e,s.note&&(this.note=s.note);const n=s.canonize?e.canonize({max:s.max,maxArgs:s.maxArgs}):{found:!1};this.arity=n.found&&n.proper&&n.arity||0,this.proper=n.proper??!1,this.terminal=s.terminal??this.proper,this.canonical=n.canonical}getSymbols(){return this.terminal?new Map([[this,1]]):this.impl.getSymbols()}weight(){return this.terminal?1:this.impl.weight()}expand(){return this.impl.expand()}subst(t,e){return this.impl.subst(t,e)}step(){return this.arity>0?{expr:this,steps:0,changed:!1}:{expr:this.impl,steps:0,changed:!0}}reduce(t){return t.length<this.arity?null:this.impl.apply(...t)}wantsArgs(){return this.impl.wantsArgs()}equals(t){return t.equals(this.impl)}contains(t){return this.impl.contains(t)}_rski(t){return this.impl._rski(t)}toString(t){return this.outdated?this.impl.toString(t):super.toString(t)}needsParens(){return!!this.outdated&&this.impl.needsParens()}}function v(t,e){return 0===t.length?e:new x(t,e)}function A(t){if(t instanceof u)return A(t.fun).apply(...t.args.map(A));if(t instanceof x)return new x(t.arg,A(t.impl));if(t instanceof S)return A(t.impl);const e=t.canonize();if(e.canonical)return e.canonical;throw new Error("Failed to canonize expression: "+t)}function*k(t,e={},s=1/0){if(t.freeOnly())return void(t.weight()<s&&(yield{expr:t,steps:0,comment:"only free vars"}));let n=0,r=0;if(t instanceof u){const[i,a]=t.split();for(const t of k(i,e,s-1)){const e=t.expr.apply(a);n=r+t.steps,e.weight()<s&&(s=e.weight(),yield{expr:e,steps:t.steps,comment:t.comment+"(app)"})}r=n;for(const t of k(a,e,s-1)){const e=i.apply(t.expr);n=r+t.steps,e.weight()<s&&(s=e.weight(),yield{expr:e,steps:t.steps,comment:t.comment+"(app)"})}r=n}if(t instanceof x){for(const i of k(t.impl,e,s-1)){const e=new x(t.arg,i.expr);e.weight()<s&&(s=e.weight(),n=r+i.steps,yield{expr:e,steps:i.steps,comment:i.comment+"(lambda)"})}r=n}const i=t.canonize({max:e.max,maxArgs:e.maxArgs});i.canonical&&i.canonical.weight()<s&&(s=i.canonical.weight(),yield{expr:i.canonical,steps:r+i.steps,comment:"canonical"})}y("I",(t=>t)),y("K",(t=>e=>t)),y("S",(t=>e=>s=>t.apply(s,e.apply(s)))),y("B",(t=>e=>s=>t.apply(e.apply(s)))),y("C",(t=>e=>s=>t.apply(s).apply(e))),y("W",(t=>e=>t.apply(e).apply(e))),y("+",(t=>e=>s=>e.apply(t.apply(e,s))),{note:"<var>n</var> &mapsto; <var>n</var> + 1 <i>or</i> SB",apply:t=>t instanceof b?new b(t.n+1):null}),a.lambdaPlaceholder=new w("->",(t=>t),{arity:1,canonize:!1,note:"Lambda placeholder",apply:t=>{throw new Error("Attempt to use a placeholder in expression")}}),t.exports={Expr:a,App:u,FreeVar:d,Lambda:x,Native:w,Alias:S,Church:b,globalOptions:i,native:g}},755:(t,e,s)=>{const{Tokenizer:n,restrict:r}=s(502),{globalOptions:i,Expr:a,App:o,FreeVar:h,Lambda:p,Native:l,Alias:c,Church:u,native:m}=s(695);class f extends a{apply(...t){return t.length?t.shift().apply(...t):this}postParse(){throw new Error("Attempt to use empty expression () as a term")}}class d extends f{constructor(t,e={}){if(super(),this.impl=new f,t instanceof h)this.terms=[t];else{if(!(t instanceof d))throw new Error("Expected FreeVar or PartialLambda");if(!(t.impl instanceof h))throw new Error("Expected FreeVar->...->FreeVar->Expr");this.terms=[...t.terms,t.impl]}}apply(t,...e){if(null===t||0!==e.length)throw new Error("bad syntax in partial lambda expr");return this.impl=this.impl.apply(t),this}postParse(){return new p(this.terms,this.impl)}}const w=new n("[()]","[A-Z]","[a-z_][a-z_0-9]*","\\b[0-9]+\\b","->","\\+");class g{constructor(t={}){this.annotate=t.annotate??!1,this.known={...m},this.hasNumbers=!0,this.hasLambdas=!0,this.allow=new Set(Object.keys(this.known));for(const e in t.terms??{})t.terms[e].match(/^Native:/)||this.add(e,t.terms[e]);this.hasNumbers=t.numbers??!0,this.hasLambdas=t.lambdas??!0,t.allow&&this.restrict(t.allow)}add(t,e,s){if("string"==typeof t)if("string"==typeof e)t=new c(t,this.parse(e),{canonize:!0});else{if(!(e instanceof a))throw new Error("add: term must be an Alias or a string and impl must be an Expr or a string");t=new c(t,e,{canonize:!0})}else t instanceof c&&(t=new c(t.name,t.impl,{canonize:!0}));if(!(t instanceof c))throw new Error("add: term must be an Alias or a string (accompanied with an implementation)");return this.annotate&&void 0===s&&t.canonical&&(s=t.canonical.toString({terse:!0,html:!0})),void 0!==s&&(t.note=s),this.known[""+t]=t,this.allow.add(""+t),this}maybeAdd(t,e){return this.known[t]?this.allow.add(t):this.add(t,e),this}restrict(t){return this.allow=r(this.allow,t),this}showRestrict(t="+"){const e=[];let s=!0;for(const n of[...r(this.allow,t)].sort()){const t=n.match(/^[A-Z]$/);!e.length||s&&t||e.push(" "),e.push(n),s=t}return e.join("")}remove(t){return this.known[t].outdated=!0,delete this.known[t],this.allow.delete(t),this}getTerms(){const t={};for(const e of Object.keys(this.known))this.allow.has(e)&&(t[e]=this.known[e]);return t}parse(t,e={},s={}){const n=t.replace(/\/\/[^\n]*$/gm,"").split(/\s*;[\s;]*/).filter((t=>t.match(/\S/))),r={...e};let i=new f;for(const t of n){const[e,n,a]=t.match(/^(?:\s*([A-Z]|[a-z][a-z_0-9]*)\s*=\s*)?(.*)$/s);if(i instanceof c&&(i.outdated=!0),i=this.parseLine(a,r,s),void 0!==n){if(void 0!==r[n])throw new Error("Attempt to redefine a known term: "+n);i=new c(n,i),r[n]=i}}for(const t in r)!e[t]&&r[t]instanceof g.classes.FreeVar&&(e[t]=r[t]);return i}parseLine(t,e={},s={}){const n={numbers:s.numbers??this.hasNumbers,lambdas:s.lambdas??this.hasLambdas,allow:r(this.allow,s.allow)};n.numbers?n.allow.add("+"):n.allow.delete("+");const i=w.split(t),a=new f,o=[a];for(const s of i)if("("===s)o.push(a);else if(")"===s){if(o.length<2)throw new Error("unbalanced input: extra closing parenthesis"+t);const e=o.pop().postParse(),s=o.pop();o.push(s.apply(e))}else if("->"===s){if(!n.lambdas)throw new Error("Lambdas not supported, allow them explicitly");o.push(new d(o.pop(),e))}else if(s.match(/^[0-9]+$/)){if(!n.numbers)throw new Error("Church numbers not supported, allow them explicitly");const t=o.pop();o.push(t.apply(new u(s)))}else{const t=o.pop();if(!e[s]&&this.known[s]&&!n.allow.has(s))throw new Error("Term '"+s+"' is not in the restricted set "+[...n.allow].sort().join(" "));const r=e[s]??this.known[s]??(e[s]=new h(s));o.push(t.apply(r))}if(1!==o.length)throw new Error("unbalanced input: missing "+(o.length-1)+" closing parenthesis:"+t);return o.pop().postParse()}toJSON(){return{allow:this.showRestrict("+"),numbers:this.hasNumbers,lambdas:this.hasLambdas,terms:this.getTerms(),annotate:this.annotate}}}g.free=(...t)=>t.map((t=>new h(t))),g.church=t=>new u(t),g.classes={Expr:a,Native:l,Alias:c,FreeVar:h,Lambda:p,Church:u};for(const t in m)g[t]=m[t];g.native=m,g.options=i,g.lambdaPlaceholder=a.lambdaPlaceholder,t.exports={SKI:g}},76:(t,e,s)=>{const{SKI:n}=s(755),{Expr:r,FreeVar:i,Alias:a,Lambda:o}=n.classes;class h{constructor(t,e){this.max=e.max??1e3,this.note=e.note,this.vars={...e.vars??{}},this.input=t,this.engine=e.engine}parse(t){return new o(this.input,this.engine.parse(t,this.vars))}check(...t){throw new Error("not implemented")}}class p extends h{constructor(t,e,s){if(2!==s.length)throw new Error("Case accepts exactly 2 strings");super(t,e),[this.e1,this.e2]=s.map((t=>this.parse(t)))}check(...t){const e=(t,e)=>t.reduce(e)??t.apply(...e),s=e(this.e1,t),n=s.run({max:this.max}),r=e(this.e2,t).run({max:this.max});let i=null;return n.final&&r.final?n.expr.equals(r.expr)||(i="expected: "+r.expr):i="failed to reach normal form in "+this.max+" steps",{pass:!i,reason:i,steps:n.steps,start:s,found:n.expr,expected:r.expr,note:this.note,args:t,case:this}}}class l extends h{constructor(t,e,s){super(t,e),this.expr=this.parse(s[0])}check(...t){const e=this.expr.apply(...t),s=e.run({max:this.max}),n=s.expr.canonize().linear?null:"expected a linear expression, i.e. such that uses all inputs exactly once";return{pass:!n,reason:n,steps:s.steps,start:e,found:s.expr,case:this,note:this.note,args:t}}}t.exports={Quest:class{constructor(t={}){const{input:e,vars:s,cases:r,allow:i,numbers:o,lambdas:h,subst:p,engine:l,engineFull:c,...u}=t;this.engine=l??new n,this.engineFull=c??new n,this.restrict={allow:i,numbers:o??!1,lambdas:h??!1},this.vars={},this.subst=Array.isArray(p)?p:[p??"phi"];const m={};for(const t of s??[]){const e=this.engineFull.parse(t,m);if(e instanceof n.classes.Alias)this.vars[e.name]=new a(e.name,e.impl,{terminal:!0,canonize:!1});else{if(!(e instanceof n.classes.FreeVar))throw new Error("Unsupported given variable type: "+t);this.vars[e.name]=e}}this.input=[];for(const t of Array.isArray(e)?e:[e])this.addInput(t);if(!this.input.length)throw new Error("Quest needs at least one input placeholder");p&&(this.input[0].fancy=this.subst[0]),this.varsFull={...this.vars,...m};for(const t of this.input){if(t.name in this.varsFull)throw new Error("input placeholder name is duplicated or clashes with vars: "+t.name);this.varsFull[t.name]=t.placeholder}var f;this.cases=[],this.title=u.title,u.descr=void 0===(f=u.descr)?f:Array.isArray(f)?f.join(" "):""+f,this.descr=u.descr,this.meta=u;for(const t of r??[])this.add(...t)}allowed(){const t=this.restrict.allow??"",e=Object.keys(this.vars).sort();return t?this.engine.showRestrict(t+"+"+e.join(" ")):e.map((t=>"+"+t)).join(" ")}addInput(t){if("object"!=typeof t&&(t={name:t}),"string"!=typeof t.name)throw new Error("quest 'input' field must be a string or a {name: string, ...} object");[t.placeholder]=n.free(t.name),this.input.push(t)}add(t,...e){"string"==typeof t?(e.unshift(t),t={}):t={...t},t.engine=t.engine??this.engineFull,t.vars=t.vars??this.varsFull;const s=this.input.map((t=>t.placeholder));return this.cases.push(t.linear?new l(s,t,e):new p(s,t,e)),this}prepare(...t){if(t.length!==this.input.length)throw new Error("Solutions provided "+t.length+" terms where "+this.input.length+" are expected");let e=0;const s=[],n={...this.vars};for(let r=0;r<t.length;r++){const o=this.input[r],h=this.engine.parse(t[r],n,{allow:o.allow??this.restrict.allow,numbers:o.numbers??this.restrict.numbers,lambdas:o.lambdas??this.restrict.lambdas});e+=h.weight();const p=h instanceof i?h:new a(o.fancy??o.name,h,{terminal:!0,canonize:!1});n[o.name]=p,s.push(p)}return{prepared:s,weight:e}}check(...t){try{const{prepared:e,weight:s}=this.prepare(...t),n=this.cases.map((t=>t.check(...e))),r=n.reduce(((t,e)=>t&&e.pass),!0),i=n.reduce(((t,e)=>t+e.steps),0);return{expr:e[0],input:e,pass:r,steps:i,details:n,weight:s}}catch(e){return{pass:!1,details:[],exception:e,steps:0,input:t}}}show(){return[...this.cases]}}}},502:t=>{class e{constructor(...t){const e="$|(\\s+)|"+t.map((t=>"(?:"+t+")")).sort(((t,e)=>e.length-t.length)).join("|");this.rex=new RegExp(e,"gys")}split(t){this.rex.lastIndex=0;const e=[...t.matchAll(this.rex)],s=e.pop()?.index??0;if(s!==t.length)throw new Error("Unknown tokens at pos "+s+"/"+t.length+" starting with "+t.substring(s));return e.filter((t=>void 0===t[1])).map((t=>t[0]))}}const s=new e("[-=+]","[A-Z]","\\b[a-z_][a-z_0-9]*\\b");t.exports={Tokenizer:e,restrict:function(t,e){if(!e)return t;let n=new Set([...t]),r=0;const i=[t=>{n=new Set([t]),r=1},t=>{n.add(t)},t=>{n.delete(t)}];for(const t of s.split(e))"="===t?r=0:"+"===t?r=1:"-"===t?r=2:i[r](t);return n},skipDup:function(t,e){const s=new Set,n=new Set;for(let r=0;r<t.length;r++){const i=e.get(t[r])??0;i?i>1&&n.add(r):s.add(r)}return[s,n]},isSubset:function(t,e){for(const s of t)if(!e.has(s))return!1;return!0}}}},e={};!function s(n){var r=e[n];if(void 0!==r)return r.exports;var i=e[n]={exports:{}};return t[n](i,i.exports,s),i.exports}(10)})();