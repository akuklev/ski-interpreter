(()=>{var t={10:(t,n,r)=>{const e=r(592);t.exports={...e},"undefined"!=typeof window&&(window.SKI=e.SKI)},592:t=>{class n{combine(...t){return t.length>0?new r(this,...t):this}expand(){return this}step(){return null}run(t=1e3){let n=this;for(let r=0;r<t;r++){const t=n.step();if(!t)return n;n=t}throw new Error("Failed to resolve expression in "+t+" steps")}isNative(){return!1}toString(){throw new Error("toString() undefined for generic AST")}}class r extends n{constructor(...t){super(),this.args=t,this.final=!1}combine(...t){return 0===t.length?this:new r(...this.args,...t)}expand(){const[t,...n]=this.args.map((t=>t.expand()));return t.combine(...n)}step(){if(this.final)return null;let t=0;const n=[];for(const r of this.args){const e=r.step();n.push(e??r),e&&t++}if(t)return n.shift().combine(...n);if(this.args[0]instanceof s&&this.args.length>this.args[0].arity){const[t,...n]=[...this.args],r=n.splice(0,t.arity);return t.impl(...r).combine(...n)}return this.final=!0,null}toString(){return this.args.map(((t,n)=>n?"("+t+")":t.toString())).join("")}}class e extends n{constructor(t){super(),this.name=t}toString(){return this.name}}class s extends e{constructor(t,n,r){super(t),this.arity=n,this.impl=r}isNative(){return!0}}class i extends n{combine(...t){return t.length?t.shift().combine(...t):this}toString(){return"<empty>"}}class o extends e{constructor(t,n){super(t),this.impl=n}expand(){return this.impl.expand()}step(){return this.impl}toString(){return this.outdated?this.impl.toString():super.toString()}}t.exports={SKI:class{constructor(){this.known={},this.add("I",[1,t=>t],"x -> x"),this.add("K",[2,(t,n)=>t],"(x y) -> x"),this.add("S",[3,(t,n,r)=>t.combine(r).combine(n.combine(r))],"(x y z) -> x z (y z)")}add(t,r,e=""){if("string"==typeof r)r=new o(t,this.parse(r));else if(Array.isArray(r))r=new s(t,r[0],r[1]);else{if(!(r instanceof n))throw new Error("add: impl must be an Ast, a string, or a [arity, impl] pair");r=new o(t,r)}return r.note=e,this.known[t]=r,this}remove(t){return this.known[t].outdated=!0,delete this.known[t],this}getTerms(){return{...this.known}}parse(t){const n=[...t.matchAll(/([()A-Z]|[a-z_][a-z_0-9]*)|\s+|($)/gys)],r=n.pop();if(""!==r[2])throw new Error("Unknown tokens in string starting with "+t.substring(r.index));const s=n.map((t=>t[1])).filter((t=>void 0!==t)),o=new i,a=[o];for(const n of s)if("("===n)a.push(o);else if(")"===n){if(a.length<2)throw new Error("unbalanced input: "+t);const n=a.pop(),r=a.pop();a.push(r.combine(n))}else{const t=a.pop(),r=this.known[n]??new e(n);a.push(t.combine(r))}if(1!==a.length)throw new Error("unbalanced input: "+t);return a[0]}}}}},n={};!function r(e){var s=n[e];if(void 0!==s)return s.exports;var i=n[e]={exports:{}};return t[e](i,i.exports,r),i.exports}(10)})();