(()=>{var t={10:(t,n,e)=>{const s=e(592);t.exports={...s},"undefined"!=typeof window&&(window.SKI=s.SKI)},592:t=>{class n{combine(...t){return t.length>0?new e(this,t):this}step(){return null}run(t=1e3){let n=this;for(let e=0;e<t;e++){const t=n.step();if(!t)return n;n=t}throw new Error("Failed to resolve expression in "+t+" steps")}getImpl(){return this.toString()}toString(){throw new Error("toString() undefined for generic AST")}}class e extends n{constructor(t,n){super(),this.fun=t,this.args=n}combine(...t){return 0===t.length?this:new e(this.fun,[...this.args,...t])}step(){let t=0;const n=this.fun.step();n&&t++;const e=[];for(const n of this.args){const s=n.step();e.push(s??n),s&&t++}if(t)return(n??this.fun).combine(...e);if(this.fun instanceof r&&this.args.length>=this.fun.arity){const t=[...this.args],n=t.splice(0,this.fun.arity);return this.fun.impl(...n).combine(...t)}return null}toString(){return this.fun.toString()+this.args.map((t=>"("+t+")")).join("")}}class s extends n{constructor(t){super(),this.name=t}getImpl(){return"constant"}toString(){return this.name}}class r extends s{constructor(t,n,e){super(t),this.arity=n,this.impl=e}getImpl(){return"native"}}class i extends n{combine(...t){return t.length?t.shift().combine(...t):this}toString(){return"<empty>"}}class o extends s{constructor(t,n){super(t),this.impl=n}combine(...t){return this.impl.combine(...t)}step(){return this.impl}getImpl(){return this.impl.toString()}}t.exports={SKI:class{constructor(){this.known={},this.add("I",[1,t=>t],"I x -> x"),this.add("K",[2,(t,n)=>t],"K x y -> x"),this.add("S",[3,(t,n,e)=>t.combine(e).combine(n.combine(e))],"S x y z -> x(z)(y(z))")}add(t,e,s=""){if("string"==typeof e)e=new o(t,this.parse(e));else if(Array.isArray(e))e=new r(t,e[0],e[1]);else{if(!(e instanceof n))throw new Error("add: impl must be an Ast, a string, or a [arity, impl] pair");e=new o(t,e)}return e.note=s,this.known[t]=e,this}list(){const t={};for(const n in this.known){const e=this.known[n];t[n]={name:n,impl:e.getImpl(),note:e.note,arity:e.arity}}return t}parse(t){const n=Object.keys(this.known).join("|"),e=new RegExp("[()]|"+n+"|(?:[a-z_][a-z_0-9]*)","g"),r=[...t.matchAll(e)].map((t=>t[0])),o=new i,h=[o];for(const n of r)if("("===n)h.push(o);else if(")"===n){if(h.length<2)throw new Error("unbalanced input: "+t);const n=h.pop(),e=h.pop();h.push(e.combine(n))}else{const t=h.pop(),e=this.known[n]??new s(n);h.push(t.combine(e))}if(1!==h.length)throw new Error("unbalanced input: "+t);return h[0]}}}}},n={};!function e(s){var r=n[s];if(void 0!==r)return r.exports;var i=n[s]={exports:{}};return t[s](i,i.exports,e),i.exports}(10)})();